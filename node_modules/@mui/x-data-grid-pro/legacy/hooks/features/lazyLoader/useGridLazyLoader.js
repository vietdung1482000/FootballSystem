import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import * as React from 'react';
import { useGridApiEventHandler, GridFeatureModeConstant, useGridSelector, gridSortModelSelector, gridFilterModelSelector, useGridApiOptionHandler } from '@mui/x-data-grid';
import { useGridVisibleRows, getRenderableIndexes } from '@mui/x-data-grid/internals';

function findSkeletonRowsSection(visibleRows, range) {
  var firstRowIndex = range.firstRowIndex,
      lastRowIndex = range.lastRowIndex;
  var visibleRowsSection = visibleRows.slice(range.firstRowIndex, range.lastRowIndex);
  var startIndex = 0;
  var endIndex = visibleRowsSection.length - 1;
  var isSkeletonSectionFound = false;

  while (!isSkeletonSectionFound && firstRowIndex < lastRowIndex) {
    if (!visibleRowsSection[startIndex].model && !visibleRowsSection[endIndex].model) {
      isSkeletonSectionFound = true;
    }

    if (visibleRowsSection[startIndex].model) {
      startIndex += 1;
      firstRowIndex += 1;
    }

    if (visibleRowsSection[endIndex].model) {
      endIndex -= 1;
      lastRowIndex -= 1;
    }
  }

  return isSkeletonSectionFound ? {
    firstRowIndex: firstRowIndex,
    lastRowIndex: lastRowIndex
  } : undefined;
}

function isLazyLoadingDisabled(_ref) {
  var lazyLoadingFeatureFlag = _ref.lazyLoadingFeatureFlag,
      rowsLoadingMode = _ref.rowsLoadingMode,
      gridDimensions = _ref.gridDimensions;

  if (!lazyLoadingFeatureFlag || !gridDimensions) {
    return true;
  }

  if (rowsLoadingMode !== GridFeatureModeConstant.server) {
    return true;
  }

  return false;
}
/**
 * @requires useGridRows (state)
 * @requires useGridPagination (state)
 * @requires useGridDimensions (method) - can be after
 * @requires useGridScroll (method
 */


export var useGridLazyLoader = function useGridLazyLoader(apiRef, props) {
  var _props$experimentalFe;

  var visibleRows = useGridVisibleRows(apiRef, props);
  var sortModel = useGridSelector(apiRef, gridSortModelSelector);
  var filterModel = useGridSelector(apiRef, gridFilterModelSelector);
  var renderedRowsIntervalCache = React.useRef({
    firstRowToRender: 0,
    lastRowToRender: 0
  });

  var _ref2 = (_props$experimentalFe = props.experimentalFeatures) != null ? _props$experimentalFe : {},
      lazyLoading = _ref2.lazyLoading;

  var getCurrentIntervalToRender = React.useCallback(function () {
    var currentRenderContext = apiRef.current.unstable_getRenderContext();

    var _getRenderableIndexes = getRenderableIndexes({
      firstIndex: currentRenderContext.firstRowIndex,
      lastIndex: currentRenderContext.lastRowIndex,
      minFirstIndex: 0,
      maxLastIndex: visibleRows.rows.length,
      buffer: props.rowBuffer
    }),
        _getRenderableIndexes2 = _slicedToArray(_getRenderableIndexes, 2),
        firstRowToRender = _getRenderableIndexes2[0],
        lastRowToRender = _getRenderableIndexes2[1];

    return {
      firstRowToRender: firstRowToRender,
      lastRowToRender: lastRowToRender
    };
  }, [apiRef, props.rowBuffer, visibleRows.rows.length]);
  var handleRenderedRowsIntervalChange = React.useCallback(function (params) {
    var dimensions = apiRef.current.getRootDimensions();

    if (isLazyLoadingDisabled({
      lazyLoadingFeatureFlag: lazyLoading,
      rowsLoadingMode: props.rowsLoadingMode,
      gridDimensions: dimensions
    })) {
      return;
    }

    var fetchRowsParams = {
      firstRowToRender: params.firstRowToRender,
      lastRowToRender: params.lastRowToRender,
      sortModel: sortModel,
      filterModel: filterModel
    };

    if (renderedRowsIntervalCache.current.firstRowToRender === params.firstRowToRender && renderedRowsIntervalCache.current.lastRowToRender === params.lastRowToRender) {
      return;
    }

    if (sortModel.length === 0 && filterModel.items.length === 0) {
      var skeletonRowsSection = findSkeletonRowsSection(visibleRows.rows, {
        firstRowIndex: params.firstRowToRender,
        lastRowIndex: params.lastRowToRender
      });

      if (!skeletonRowsSection) {
        return;
      }

      fetchRowsParams.firstRowToRender = skeletonRowsSection.firstRowIndex;
      fetchRowsParams.lastRowToRender = skeletonRowsSection.lastRowIndex;
    }

    renderedRowsIntervalCache.current = params;
    apiRef.current.publishEvent('fetchRows', fetchRowsParams);
  }, [apiRef, props.rowsLoadingMode, sortModel, filterModel, visibleRows.rows, lazyLoading]);
  var handleGridSortModelChange = React.useCallback(function (newSortModel) {
    var dimensions = apiRef.current.getRootDimensions();

    if (isLazyLoadingDisabled({
      lazyLoadingFeatureFlag: lazyLoading,
      rowsLoadingMode: props.rowsLoadingMode,
      gridDimensions: dimensions
    })) {
      return;
    }

    apiRef.current.unstable_requestPipeProcessorsApplication('hydrateRows');

    var _getCurrentIntervalTo = getCurrentIntervalToRender(),
        firstRowToRender = _getCurrentIntervalTo.firstRowToRender,
        lastRowToRender = _getCurrentIntervalTo.lastRowToRender;

    var fetchRowsParams = {
      firstRowToRender: firstRowToRender,
      lastRowToRender: lastRowToRender,
      sortModel: newSortModel,
      filterModel: filterModel
    };
    apiRef.current.publishEvent('fetchRows', fetchRowsParams);
  }, [apiRef, props.rowsLoadingMode, filterModel, lazyLoading, getCurrentIntervalToRender]);
  var handleGridFilterModelChange = React.useCallback(function (newFilterModel) {
    var dimensions = apiRef.current.getRootDimensions();

    if (isLazyLoadingDisabled({
      lazyLoadingFeatureFlag: lazyLoading,
      rowsLoadingMode: props.rowsLoadingMode,
      gridDimensions: dimensions
    })) {
      return;
    }

    apiRef.current.unstable_requestPipeProcessorsApplication('hydrateRows');

    var _getCurrentIntervalTo2 = getCurrentIntervalToRender(),
        firstRowToRender = _getCurrentIntervalTo2.firstRowToRender,
        lastRowToRender = _getCurrentIntervalTo2.lastRowToRender;

    var fetchRowsParams = {
      firstRowToRender: firstRowToRender,
      lastRowToRender: lastRowToRender,
      sortModel: sortModel,
      filterModel: newFilterModel
    };
    apiRef.current.publishEvent('fetchRows', fetchRowsParams);
  }, [apiRef, props.rowsLoadingMode, sortModel, lazyLoading, getCurrentIntervalToRender]);
  useGridApiEventHandler(apiRef, 'renderedRowsIntervalChange', handleRenderedRowsIntervalChange);
  useGridApiEventHandler(apiRef, 'sortModelChange', handleGridSortModelChange);
  useGridApiEventHandler(apiRef, 'filterModelChange', handleGridFilterModelChange);
  useGridApiOptionHandler(apiRef, 'fetchRows', props.onFetchRows);
};