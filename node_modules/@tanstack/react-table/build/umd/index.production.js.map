{"version":3,"file":"index.production.js","sources":["../../../table-core/build/lib/index.mjs","../../src/index.tsx"],"sourcesContent":["/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n// Is this type a tuple?\n\n// If this type is a tuple, what indices are allowed?\n\n///\n\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction noop() {\n  //\n}\nfunction makeStateUpdater(key, instance) {\n  return updater => {\n    instance.setState(old => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, old[key])\n      };\n    });\n  };\n}\nfunction isFunction(d) {\n  return d instanceof Function;\n}\nfunction flattenBy(arr, getChildren) {\n  const flat = [];\n  const recurse = subArr => {\n    subArr.forEach(item => {\n      flat.push(item);\n      const children = getChildren(item);\n      if (children != null && children.length) {\n        recurse(children);\n      }\n    });\n  };\n  recurse(arr);\n  return flat;\n}\nfunction memo(getDeps, fn, opts) {\n  let deps = [];\n  let result;\n  return () => {\n    let depTime;\n    if (opts.key && opts.debug) depTime = Date.now();\n    const newDeps = getDeps();\n    const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index) => deps[index] !== dep);\n    if (!depsChanged) {\n      return result;\n    }\n    deps = newDeps;\n    let resultTime;\n    if (opts.key && opts.debug) resultTime = Date.now();\n    result = fn(...newDeps);\n    opts == null ? void 0 : opts.onChange == null ? void 0 : opts.onChange(result);\n    if (opts.key && opts.debug) {\n      if (opts != null && opts.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n        const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n        const resultFpsPercentage = resultEndTime / 16;\n        const pad = (str, num) => {\n          str = String(str);\n          while (str.length < num) {\n            str = ' ' + str;\n          }\n          return str;\n        };\n        console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);\n      }\n    }\n    return result;\n  };\n}\n\nfunction createColumn(table, columnDef, depth, parent) {\n  var _ref, _resolvedColumnDef$id;\n  const defaultColumn = table._getDefaultColumnDef();\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef\n  };\n  const accessorKey = resolvedColumnDef.accessorKey;\n  let id = (_ref = (_resolvedColumnDef$id = resolvedColumnDef.id) != null ? _resolvedColumnDef$id : accessorKey ? accessorKey.replace('.', '_') : undefined) != null ? _ref : typeof resolvedColumnDef.header === 'string' ? resolvedColumnDef.header : undefined;\n  let accessorFn;\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn;\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = originalRow => {\n        let result = originalRow;\n        for (const key of accessorKey.split('.')) {\n          result = result[key];\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            throw new Error(`\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`);\n          }\n        }\n        return result;\n      };\n    } else {\n      accessorFn = originalRow => originalRow[resolvedColumnDef.accessorKey];\n    }\n  }\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(resolvedColumnDef.accessorFn ? `Columns require an id when using an accessorFn` : `Columns require an id when using a non-string header`);\n    }\n    throw new Error();\n  }\n  let column = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent,\n    depth,\n    columnDef: resolvedColumnDef,\n    columns: [],\n    getFlatColumns: memo(() => [true], () => {\n      var _column$columns;\n      return [column, ...((_column$columns = column.columns) == null ? void 0 : _column$columns.flatMap(d => d.getFlatColumns()))];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;\n      }\n    }),\n    getLeafColumns: memo(() => [table._getOrderColumnsFn()], orderColumns => {\n      var _column$columns2;\n      if ((_column$columns2 = column.columns) != null && _column$columns2.length) {\n        let leafColumns = column.columns.flatMap(column => column.getLeafColumns());\n        return orderColumns(leafColumns);\n      }\n      return [column];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;\n      }\n    })\n  };\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn == null ? void 0 : feature.createColumn(column, table));\n  }, column);\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column;\n}\n\n//\n\nfunction createHeader(table, column, options) {\n  var _options$id;\n  const id = (_options$id = options.id) != null ? _options$id : column.id;\n  let header = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null,\n    getLeafHeaders: () => {\n      const leafHeaders = [];\n      const recurseHeader = h => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader);\n        }\n        leafHeaders.push(h);\n      };\n      recurseHeader(header);\n      return leafHeaders;\n    },\n    getContext: () => ({\n      table,\n      header: header,\n      column\n    })\n  };\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader == null ? void 0 : feature.createHeader(header, table));\n  });\n  return header;\n}\nconst Headers = {\n  createTable: table => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n        var _left$map$filter, _right$map$filter;\n        const leftColumns = (_left$map$filter = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter : [];\n        const rightColumns = (_right$map$filter = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter : [];\n        const centerColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n        const headerGroups = buildHeaderGroups(allColumns, [...leftColumns, ...centerColumns, ...rightColumns], table);\n        return headerGroups;\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugHeaders;\n        }\n      }),\n      getCenterHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n        leafColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n        return buildHeaderGroups(allColumns, leafColumns, table, 'center');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugHeaders;\n        }\n      }),\n      getLeftHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left], (allColumns, leafColumns, left) => {\n        var _left$map$filter2;\n        const orderedLeafColumns = (_left$map$filter2 = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter2 : [];\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugHeaders;\n        }\n      }),\n      getRightHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.right], (allColumns, leafColumns, right) => {\n        var _right$map$filter2;\n        const orderedLeafColumns = (_right$map$filter2 = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter2 : [];\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n        debug: () => {\n          var _table$options$debugA4;\n          return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugHeaders;\n        }\n      }),\n      // Footer Groups\n\n      getFooterGroups: memo(() => [table.getHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n        debug: () => {\n          var _table$options$debugA5;\n          return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugHeaders;\n        }\n      }),\n      getLeftFooterGroups: memo(() => [table.getLeftHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n        debug: () => {\n          var _table$options$debugA6;\n          return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugHeaders;\n        }\n      }),\n      getCenterFooterGroups: memo(() => [table.getCenterHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n        debug: () => {\n          var _table$options$debugA7;\n          return (_table$options$debugA7 = table.options.debugAll) != null ? _table$options$debugA7 : table.options.debugHeaders;\n        }\n      }),\n      getRightFooterGroups: memo(() => [table.getRightHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n        debug: () => {\n          var _table$options$debugA8;\n          return (_table$options$debugA8 = table.options.debugAll) != null ? _table$options$debugA8 : table.options.debugHeaders;\n        }\n      }),\n      // Flat Headers\n\n      getFlatHeaders: memo(() => [table.getHeaderGroups()], headerGroups => {\n        return headerGroups.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n        debug: () => {\n          var _table$options$debugA9;\n          return (_table$options$debugA9 = table.options.debugAll) != null ? _table$options$debugA9 : table.options.debugHeaders;\n        }\n      }),\n      getLeftFlatHeaders: memo(() => [table.getLeftHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n        debug: () => {\n          var _table$options$debugA10;\n          return (_table$options$debugA10 = table.options.debugAll) != null ? _table$options$debugA10 : table.options.debugHeaders;\n        }\n      }),\n      getCenterFlatHeaders: memo(() => [table.getCenterHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n        debug: () => {\n          var _table$options$debugA11;\n          return (_table$options$debugA11 = table.options.debugAll) != null ? _table$options$debugA11 : table.options.debugHeaders;\n        }\n      }),\n      getRightFlatHeaders: memo(() => [table.getRightHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n        debug: () => {\n          var _table$options$debugA12;\n          return (_table$options$debugA12 = table.options.debugAll) != null ? _table$options$debugA12 : table.options.debugHeaders;\n        }\n      }),\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(() => [table.getCenterFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders;\n          return !((_header$subHeaders = header.subHeaders) != null && _header$subHeaders.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n        debug: () => {\n          var _table$options$debugA13;\n          return (_table$options$debugA13 = table.options.debugAll) != null ? _table$options$debugA13 : table.options.debugHeaders;\n        }\n      }),\n      getLeftLeafHeaders: memo(() => [table.getLeftFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders2;\n          return !((_header$subHeaders2 = header.subHeaders) != null && _header$subHeaders2.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n        debug: () => {\n          var _table$options$debugA14;\n          return (_table$options$debugA14 = table.options.debugAll) != null ? _table$options$debugA14 : table.options.debugHeaders;\n        }\n      }),\n      getRightLeafHeaders: memo(() => [table.getRightFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders3;\n          return !((_header$subHeaders3 = header.subHeaders) != null && _header$subHeaders3.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n        debug: () => {\n          var _table$options$debugA15;\n          return (_table$options$debugA15 = table.options.debugAll) != null ? _table$options$debugA15 : table.options.debugHeaders;\n        }\n      }),\n      getLeafHeaders: memo(() => [table.getLeftHeaderGroups(), table.getCenterHeaderGroups(), table.getRightHeaderGroups()], (left, center, right) => {\n        var _left$0$headers, _left$, _center$0$headers, _center$, _right$0$headers, _right$;\n        return [...((_left$0$headers = (_left$ = left[0]) == null ? void 0 : _left$.headers) != null ? _left$0$headers : []), ...((_center$0$headers = (_center$ = center[0]) == null ? void 0 : _center$.headers) != null ? _center$0$headers : []), ...((_right$0$headers = (_right$ = right[0]) == null ? void 0 : _right$.headers) != null ? _right$0$headers : [])].map(header => {\n          return header.getLeafHeaders();\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n        debug: () => {\n          var _table$options$debugA16;\n          return (_table$options$debugA16 = table.options.debugAll) != null ? _table$options$debugA16 : table.options.debugHeaders;\n        }\n      })\n    };\n  }\n};\nfunction buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {\n  var _headerGroups$0$heade, _headerGroups$;\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0;\n  const findMaxDepth = function (columns, depth) {\n    if (depth === void 0) {\n      depth = 1;\n    }\n    maxDepth = Math.max(maxDepth, depth);\n    columns.filter(column => column.getIsVisible()).forEach(column => {\n      var _column$columns;\n      if ((_column$columns = column.columns) != null && _column$columns.length) {\n        findMaxDepth(column.columns, depth + 1);\n      }\n    }, 0);\n  };\n  findMaxDepth(allColumns);\n  let headerGroups = [];\n  const createHeaderGroup = (headersToGroup, depth) => {\n    // The header group we are creating\n    const headerGroup = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: []\n    };\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders = [];\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0];\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth;\n      let column;\n      let isPlaceholder = false;\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent;\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column;\n        isPlaceholder = true;\n      }\n      if (latestPendingParentHeader && (latestPendingParentHeader == null ? void 0 : latestPendingParentHeader.column) === column) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup);\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup == null ? void 0 : headerToGroup.id].filter(Boolean).join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder ? `${pendingParentHeaders.filter(d => d.column === column).length}` : undefined,\n          depth,\n          index: pendingParentHeaders.length\n        });\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup);\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header);\n      }\n      headerGroup.headers.push(headerToGroup);\n      headerToGroup.headerGroup = headerGroup;\n    });\n    headerGroups.push(headerGroup);\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1);\n    }\n  };\n  const bottomHeaders = columnsToGroup.map((column, index) => createHeader(table, column, {\n    depth: maxDepth,\n    index\n  }));\n  createHeaderGroup(bottomHeaders, maxDepth - 1);\n  headerGroups.reverse();\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = headers => {\n    const filteredHeaders = headers.filter(header => header.column.getIsVisible());\n    return filteredHeaders.map(header => {\n      let colSpan = 0;\n      let rowSpan = 0;\n      let childRowSpans = [0];\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = [];\n        recurseHeadersForSpans(header.subHeaders).forEach(_ref => {\n          let {\n            colSpan: childColSpan,\n            rowSpan: childRowSpan\n          } = _ref;\n          colSpan += childColSpan;\n          childRowSpans.push(childRowSpan);\n        });\n      } else {\n        colSpan = 1;\n      }\n      const minChildRowSpan = Math.min(...childRowSpans);\n      rowSpan = rowSpan + minChildRowSpan;\n      header.colSpan = colSpan;\n      header.rowSpan = rowSpan;\n      return {\n        colSpan,\n        rowSpan\n      };\n    });\n  };\n  recurseHeadersForSpans((_headerGroups$0$heade = (_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) != null ? _headerGroups$0$heade : []);\n  return headerGroups;\n}\n\n//\n\nconst defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER\n};\nconst getDefaultColumnSizingInfoState = () => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: []\n});\nconst ColumnSizing = {\n  getDefaultColumnDef: () => {\n    return defaultColumnSizing;\n  },\n  getInitialState: state => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getSize: () => {\n        var _column$columnDef$min, _ref, _column$columnDef$max;\n        const columnSize = table.getState().columnSizing[column.id];\n        return Math.min(Math.max((_column$columnDef$min = column.columnDef.minSize) != null ? _column$columnDef$min : defaultColumnSizing.minSize, (_ref = columnSize != null ? columnSize : column.columnDef.size) != null ? _ref : defaultColumnSizing.size), (_column$columnDef$max = column.columnDef.maxSize) != null ? _column$columnDef$max : defaultColumnSizing.maxSize);\n      },\n      getStart: position => {\n        const columns = !position ? table.getVisibleLeafColumns() : position === 'left' ? table.getLeftVisibleLeafColumns() : table.getRightVisibleLeafColumns();\n        const index = columns.findIndex(d => d.id === column.id);\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1];\n          return prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize();\n        }\n        return 0;\n      },\n      resetSize: () => {\n        table.setColumnSizing(_ref2 => {\n          let {\n            [column.id]: _,\n            ...rest\n          } = _ref2;\n          return rest;\n        });\n      },\n      getCanResize: () => {\n        var _column$columnDef$ena, _table$options$enable;\n        return ((_column$columnDef$ena = column.columnDef.enableResizing) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnResizing) != null ? _table$options$enable : true);\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id;\n      }\n    };\n  },\n  createHeader: (header, table) => {\n    return {\n      getSize: () => {\n        let sum = 0;\n        const recurse = header => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse);\n          } else {\n            var _header$column$getSiz;\n            sum += (_header$column$getSiz = header.column.getSize()) != null ? _header$column$getSiz : 0;\n          }\n        };\n        recurse(header);\n        return sum;\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader = header.headerGroup.headers[header.index - 1];\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize();\n        }\n        return 0;\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id);\n        const canResize = column.getCanResize();\n        return e => {\n          if (!canResize) {\n            return;\n          }\n          e.persist == null ? void 0 : e.persist();\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return;\n            }\n          }\n          const startSize = header.getSize();\n          const columnSizingStart = header ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()]) : [[column.id, column.getSize()]];\n          const clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX;\n          const updateOffset = (eventType, clientXPos) => {\n            if (typeof clientXPos !== 'number') {\n              return;\n            }\n            let newColumnSizing = {};\n            table.setColumnSizingInfo(old => {\n              var _old$startOffset, _old$startSize;\n              const deltaOffset = clientXPos - ((_old$startOffset = old == null ? void 0 : old.startOffset) != null ? _old$startOffset : 0);\n              const deltaPercentage = Math.max(deltaOffset / ((_old$startSize = old == null ? void 0 : old.startSize) != null ? _old$startSize : 0), -0.999999);\n              old.columnSizingStart.forEach(_ref3 => {\n                let [columnId, headerSize] = _ref3;\n                newColumnSizing[columnId] = Math.round(Math.max(headerSize + headerSize * deltaPercentage, 0) * 100) / 100;\n              });\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage\n              };\n            });\n            if (table.options.columnResizeMode === 'onChange' || eventType === 'end') {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing\n              }));\n            }\n          };\n          const onMove = clientXPos => updateOffset('move', clientXPos);\n          const onEnd = clientXPos => {\n            updateOffset('end', clientXPos);\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: []\n            }));\n          };\n          const mouseEvents = {\n            moveHandler: e => onMove(e.clientX),\n            upHandler: e => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler);\n              document.removeEventListener('mouseup', mouseEvents.upHandler);\n              onEnd(e.clientX);\n            }\n          };\n          const touchEvents = {\n            moveHandler: e => {\n              if (e.cancelable) {\n                e.preventDefault();\n                e.stopPropagation();\n              }\n              onMove(e.touches[0].clientX);\n              return false;\n            },\n            upHandler: e => {\n              var _e$touches$;\n              document.removeEventListener('touchmove', touchEvents.moveHandler);\n              document.removeEventListener('touchend', touchEvents.upHandler);\n              if (e.cancelable) {\n                e.preventDefault();\n                e.stopPropagation();\n              }\n              onEnd((_e$touches$ = e.touches[0]) == null ? void 0 : _e$touches$.clientX);\n            }\n          };\n          const passiveIfSupported = passiveEventSupported() ? {\n            passive: false\n          } : false;\n          if (isTouchStartEvent(e)) {\n            document.addEventListener('touchmove', touchEvents.moveHandler, passiveIfSupported);\n            document.addEventListener('touchend', touchEvents.upHandler, passiveIfSupported);\n          } else {\n            document.addEventListener('mousemove', mouseEvents.moveHandler, passiveIfSupported);\n            document.addEventListener('mouseup', mouseEvents.upHandler, passiveIfSupported);\n          }\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id\n          }));\n        };\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange == null ? void 0 : table.options.onColumnSizingChange(updater),\n      setColumnSizingInfo: updater => table.options.onColumnSizingInfoChange == null ? void 0 : table.options.onColumnSizingInfoChange(updater),\n      resetColumnSizing: defaultState => {\n        var _table$initialState$c;\n        table.setColumnSizing(defaultState ? {} : (_table$initialState$c = table.initialState.columnSizing) != null ? _table$initialState$c : {});\n      },\n      resetHeaderSizeInfo: defaultState => {\n        var _table$initialState$c2;\n        table.setColumnSizingInfo(defaultState ? getDefaultColumnSizingInfoState() : (_table$initialState$c2 = table.initialState.columnSizingInfo) != null ? _table$initialState$c2 : getDefaultColumnSizingInfoState());\n      },\n      getTotalSize: () => {\n        var _table$getHeaderGroup, _table$getHeaderGroup2;\n        return (_table$getHeaderGroup = (_table$getHeaderGroup2 = table.getHeaderGroups()[0]) == null ? void 0 : _table$getHeaderGroup2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getHeaderGroup : 0;\n      },\n      getLeftTotalSize: () => {\n        var _table$getLeftHeaderG, _table$getLeftHeaderG2;\n        return (_table$getLeftHeaderG = (_table$getLeftHeaderG2 = table.getLeftHeaderGroups()[0]) == null ? void 0 : _table$getLeftHeaderG2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getLeftHeaderG : 0;\n      },\n      getCenterTotalSize: () => {\n        var _table$getCenterHeade, _table$getCenterHeade2;\n        return (_table$getCenterHeade = (_table$getCenterHeade2 = table.getCenterHeaderGroups()[0]) == null ? void 0 : _table$getCenterHeade2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getCenterHeade : 0;\n      },\n      getRightTotalSize: () => {\n        var _table$getRightHeader, _table$getRightHeader2;\n        return (_table$getRightHeader = (_table$getRightHeader2 = table.getRightHeaderGroups()[0]) == null ? void 0 : _table$getRightHeader2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getRightHeader : 0;\n      }\n    };\n  }\n};\nlet passiveSupported = null;\nfunction passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported;\n  let supported = false;\n  try {\n    const options = {\n      get passive() {\n        supported = true;\n        return false;\n      }\n    };\n    const noop = () => {};\n    window.addEventListener('test', noop, options);\n    window.removeEventListener('test', noop);\n  } catch (err) {\n    supported = false;\n  }\n  passiveSupported = supported;\n  return passiveSupported;\n}\nfunction isTouchStartEvent(e) {\n  return e.type === 'touchstart';\n}\n\n//\n\nconst Expanding = {\n  getInitialState: state => {\n    return {\n      expanded: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    return {\n      _autoResetExpanded: () => {\n        var _ref, _table$options$autoRe;\n        if (!registered) {\n          table._queue(() => {\n            registered = true;\n          });\n          return;\n        }\n        if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetExpanded) != null ? _ref : !table.options.manualExpanding) {\n          if (queued) return;\n          queued = true;\n          table._queue(() => {\n            table.resetExpanded();\n            queued = false;\n          });\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange == null ? void 0 : table.options.onExpandedChange(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true);\n        } else {\n          table.setExpanded({});\n        }\n      },\n      resetExpanded: defaultState => {\n        var _table$initialState$e, _table$initialState;\n        table.setExpanded(defaultState ? {} : (_table$initialState$e = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.expanded) != null ? _table$initialState$e : {});\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand());\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return e => {\n          e.persist == null ? void 0 : e.persist();\n          table.toggleAllRowsExpanded();\n        };\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded;\n        return expanded === true || Object.values(expanded).some(Boolean);\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded;\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true;\n        }\n        if (!Object.keys(expanded).length) {\n          return false;\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false;\n        }\n\n        // They must all be expanded :shrug:\n        return true;\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0;\n        const rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);\n        rowIds.forEach(id => {\n          const splitId = id.split('.');\n          maxDepth = Math.max(maxDepth, splitId.length);\n        });\n        return maxDepth;\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table);\n        }\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel();\n        }\n        return table._getExpandedRowModel();\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          var _expanded;\n          const exists = old === true ? true : !!(old != null && old[row.id]);\n          let oldExpanded = {};\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true;\n            });\n          } else {\n            oldExpanded = old;\n          }\n          expanded = (_expanded = expanded) != null ? _expanded : !exists;\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true\n            };\n          }\n          if (exists && !expanded) {\n            const {\n              [row.id]: _,\n              ...rest\n            } = oldExpanded;\n            return rest;\n          }\n          return old;\n        });\n      },\n      getIsExpanded: () => {\n        var _table$options$getIsR;\n        const expanded = table.getState().expanded;\n        return !!((_table$options$getIsR = table.options.getIsRowExpanded == null ? void 0 : table.options.getIsRowExpanded(row)) != null ? _table$options$getIsR : expanded === true || (expanded == null ? void 0 : expanded[row.id]));\n      },\n      getCanExpand: () => {\n        var _table$options$getRow, _table$options$enable, _row$subRows;\n        return (_table$options$getRow = table.options.getRowCanExpand == null ? void 0 : table.options.getRowCanExpand(row)) != null ? _table$options$getRow : ((_table$options$enable = table.options.enableExpanding) != null ? _table$options$enable : true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand();\n        return () => {\n          if (!canExpand) return;\n          row.toggleExpanded();\n        };\n      }\n    };\n  }\n};\n\nconst includesString = (row, columnId, filterValue) => {\n  var _row$getValue;\n  const search = filterValue.toLowerCase();\n  return Boolean((_row$getValue = row.getValue(columnId)) == null ? void 0 : _row$getValue.toLowerCase().includes(search));\n};\nincludesString.autoRemove = val => testFalsey(val);\nconst includesStringSensitive = (row, columnId, filterValue) => {\n  var _row$getValue2;\n  return Boolean((_row$getValue2 = row.getValue(columnId)) == null ? void 0 : _row$getValue2.includes(filterValue));\n};\nincludesStringSensitive.autoRemove = val => testFalsey(val);\nconst equalsString = (row, columnId, filterValue) => {\n  var _row$getValue3;\n  return ((_row$getValue3 = row.getValue(columnId)) == null ? void 0 : _row$getValue3.toLowerCase()) === filterValue.toLowerCase();\n};\nequalsString.autoRemove = val => testFalsey(val);\nconst arrIncludes = (row, columnId, filterValue) => {\n  var _row$getValue4;\n  return (_row$getValue4 = row.getValue(columnId)) == null ? void 0 : _row$getValue4.includes(filterValue);\n};\narrIncludes.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst arrIncludesAll = (row, columnId, filterValue) => {\n  return !filterValue.some(val => {\n    var _row$getValue5;\n    return !((_row$getValue5 = row.getValue(columnId)) != null && _row$getValue5.includes(val));\n  });\n};\narrIncludesAll.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst arrIncludesSome = (row, columnId, filterValue) => {\n  return filterValue.some(val => {\n    var _row$getValue6;\n    return (_row$getValue6 = row.getValue(columnId)) == null ? void 0 : _row$getValue6.includes(val);\n  });\n};\narrIncludesSome.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst equals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) === filterValue;\n};\nequals.autoRemove = val => testFalsey(val);\nconst weakEquals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) == filterValue;\n};\nweakEquals.autoRemove = val => testFalsey(val);\nconst inNumberRange = (row, columnId, filterValue) => {\n  let [min, max] = filterValue;\n  const rowValue = row.getValue(columnId);\n  return rowValue >= min && rowValue <= max;\n};\ninNumberRange.resolveFilterValue = val => {\n  let [unsafeMin, unsafeMax] = val;\n  let parsedMin = typeof unsafeMin !== 'number' ? parseFloat(unsafeMin) : unsafeMin;\n  let parsedMax = typeof unsafeMax !== 'number' ? parseFloat(unsafeMax) : unsafeMax;\n  let min = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;\n  if (min > max) {\n    const temp = min;\n    min = max;\n    max = temp;\n  }\n  return [min, max];\n};\ninNumberRange.autoRemove = val => testFalsey(val) || testFalsey(val[0]) && testFalsey(val[1]);\n\n// Export\n\nconst filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange\n};\n// Utils\n\nfunction testFalsey(val) {\n  return val === undefined || val === null || val === '';\n}\n\n//\n\nconst Filters = {\n  getDefaultColumnDef: () => {\n    return {\n      filterFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        var _table$getCoreRowMode, _table$getCoreRowMode2;\n        const value = (_table$getCoreRowMode = table.getCoreRowModel().flatRows[0]) == null ? void 0 : (_table$getCoreRowMode2 = _table$getCoreRowMode._getAllCellsByColumnId()[column.id]) == null ? void 0 : _table$getCoreRowMode2.getValue();\n        return typeof value === 'string' || typeof value === 'number';\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n        if (typeof value === 'string') {\n          return filterFns.includesString;\n        }\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange;\n        }\n        if (typeof value === 'boolean') {\n          return filterFns.equals;\n        }\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals;\n        }\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes;\n        }\n        return filterFns.weakEquals;\n      },\n      getFilterFn: () => {\n        var _table$options$filter, _table$options$filter2;\n        return isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === 'auto' ? column.getAutoFilterFn()\n        // @ts-ignore\n        : (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[column.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column.columnDef.filterFn];\n      },\n      getCanFilter: () => {\n        var _column$columnDef$ena, _table$options$enable, _table$options$enable2;\n        return ((_column$columnDef$ena = column.columnDef.enableColumnFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnFilters) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && !!column.accessorFn;\n      },\n      getCanGlobalFilter: () => {\n        var _column$columnDef$ena2, _table$options$enable3, _table$options$enable4, _table$options$getCol;\n        return ((_column$columnDef$ena2 = column.columnDef.enableGlobalFilter) != null ? _column$columnDef$ena2 : true) && ((_table$options$enable3 = table.options.enableGlobalFilter) != null ? _table$options$enable3 : true) && ((_table$options$enable4 = table.options.enableFilters) != null ? _table$options$enable4 : true) && ((_table$options$getCol = table.options.getColumnCanGlobalFilter == null ? void 0 : table.options.getColumnCanGlobalFilter(column)) != null ? _table$options$getCol : true) && !!column.accessorFn;\n      },\n      getIsFiltered: () => column.getFilterIndex() > -1,\n      getFilterValue: () => {\n        var _table$getState$colum, _table$getState$colum2;\n        return (_table$getState$colum = table.getState().columnFilters) == null ? void 0 : (_table$getState$colum2 = _table$getState$colum.find(d => d.id === column.id)) == null ? void 0 : _table$getState$colum2.value;\n      },\n      getFilterIndex: () => {\n        var _table$getState$colum3, _table$getState$colum4;\n        return (_table$getState$colum3 = (_table$getState$colum4 = table.getState().columnFilters) == null ? void 0 : _table$getState$colum4.findIndex(d => d.id === column.id)) != null ? _table$getState$colum3 : -1;\n      },\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn();\n          const previousfilter = old == null ? void 0 : old.find(d => d.id === column.id);\n          const newFilter = functionalUpdate(value, previousfilter ? previousfilter.value : undefined);\n\n          //\n          if (shouldAutoRemoveFilter(filterFn, newFilter, column)) {\n            var _old$filter;\n            return (_old$filter = old == null ? void 0 : old.filter(d => d.id !== column.id)) != null ? _old$filter : [];\n          }\n          const newFilterObj = {\n            id: column.id,\n            value: newFilter\n          };\n          if (previousfilter) {\n            var _old$map;\n            return (_old$map = old == null ? void 0 : old.map(d => {\n              if (d.id === column.id) {\n                return newFilterObj;\n              }\n              return d;\n            })) != null ? _old$map : [];\n          }\n          if (old != null && old.length) {\n            return [...old, newFilterObj];\n          }\n          return [newFilterObj];\n        });\n      },\n      _getFacetedRowModel: table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n        return column._getFacetedRowModel();\n      },\n      _getFacetedUniqueValues: table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map();\n        }\n        return column._getFacetedUniqueValues();\n      },\n      _getFacetedMinMaxValues: table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined;\n        }\n        return column._getFacetedMinMaxValues();\n      }\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    };\n  },\n\n  createRow: (row, table) => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {}\n    };\n  },\n  createTable: table => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString;\n      },\n      getGlobalFilterFn: () => {\n        var _table$options$filter3, _table$options$filter4;\n        const {\n          globalFilterFn: globalFilterFn\n        } = table.options;\n        return isFunction(globalFilterFn) ? globalFilterFn : globalFilterFn === 'auto' ? table.getGlobalAutoFilterFn()\n        // @ts-ignore\n        : (_table$options$filter3 = (_table$options$filter4 = table.options.filterFns) == null ? void 0 : _table$options$filter4[globalFilterFn]) != null ? _table$options$filter3 : filterFns[globalFilterFn];\n      },\n      setColumnFilters: updater => {\n        const leafColumns = table.getAllLeafColumns();\n        const updateFn = old => {\n          var _functionalUpdate;\n          return (_functionalUpdate = functionalUpdate(updater, old)) == null ? void 0 : _functionalUpdate.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id);\n            if (column) {\n              const filterFn = column.getFilterFn();\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false;\n              }\n            }\n            return true;\n          });\n        };\n        table.options.onColumnFiltersChange == null ? void 0 : table.options.onColumnFiltersChange(updateFn);\n      },\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange == null ? void 0 : table.options.onGlobalFilterChange(updater);\n      },\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(defaultState ? undefined : table.initialState.globalFilter);\n      },\n      resetColumnFilters: defaultState => {\n        var _table$initialState$c, _table$initialState;\n        table.setColumnFilters(defaultState ? [] : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnFilters) != null ? _table$initialState$c : []);\n      },\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table);\n        }\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n        return table._getFilteredRowModel();\n      },\n      _getGlobalFacetedRowModel: table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, '__global__'),\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n        return table._getGlobalFacetedRowModel();\n      },\n      _getGlobalFacetedUniqueValues: table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map();\n        }\n        return table._getGlobalFacetedUniqueValues();\n      },\n      _getGlobalFacetedMinMaxValues: table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return;\n        }\n        return table._getGlobalFacetedMinMaxValues();\n      }\n    };\n  }\n};\nfunction shouldAutoRemoveFilter(filterFn, value, column) {\n  return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column) : false) || typeof value === 'undefined' || typeof value === 'string' && !value;\n}\n\nconst sum = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId);\n    return sum + (typeof nextValue === 'number' ? nextValue : 0);\n  }, 0);\n};\nconst min = (columnId, _leafRows, childRows) => {\n  let min;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (min > value || min === undefined && value >= value)) {\n      min = value;\n    }\n  });\n  return min;\n};\nconst max = (columnId, _leafRows, childRows) => {\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (max < value || max === undefined && value >= value)) {\n      max = value;\n    }\n  });\n  return max;\n};\nconst extent = (columnId, _leafRows, childRows) => {\n  let min;\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value;\n      } else {\n        if (min > value) min = value;\n        if (max < value) max = value;\n      }\n    }\n  });\n  return [min, max];\n};\nconst mean = (columnId, leafRows) => {\n  let count = 0;\n  let sum = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n    if (value != null && (value = +value) >= value) {\n      ++count, sum += value;\n    }\n  });\n  if (count) return sum / count;\n  return;\n};\nconst median = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return;\n  }\n  let min = 0;\n  let max = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n    if (typeof value === 'number') {\n      min = Math.min(min, value);\n      max = Math.max(max, value);\n    }\n  });\n  return (min + max) / 2;\n};\nconst unique = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values());\n};\nconst uniqueCount = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size;\n};\nconst count = (_columnId, leafRows) => {\n  return leafRows.length;\n};\nconst aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count\n};\n\n//\n\nconst Grouping = {\n  getDefaultColumnDef: () => {\n    return {\n      aggregatedCell: props => {\n        var _toString, _props$getValue;\n        return (_toString = (_props$getValue = props.getValue()) == null ? void 0 : _props$getValue.toString == null ? void 0 : _props$getValue.toString()) != null ? _toString : null;\n      },\n      aggregationFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      grouping: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder'\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old != null && old.includes(column.id)) {\n            return old.filter(d => d !== column.id);\n          }\n          return [...(old != null ? old : []), column.id];\n        });\n      },\n      getCanGroup: () => {\n        var _ref, _ref2, _ref3, _column$columnDef$ena;\n        return (_ref = (_ref2 = (_ref3 = (_column$columnDef$ena = column.columnDef.enableGrouping) != null ? _column$columnDef$ena : true) != null ? _ref3 : table.options.enableGrouping) != null ? _ref2 : true) != null ? _ref : !!column.accessorFn;\n      },\n      getIsGrouped: () => {\n        var _table$getState$group;\n        return (_table$getState$group = table.getState().grouping) == null ? void 0 : _table$getState$group.includes(column.id);\n      },\n      getGroupedIndex: () => {\n        var _table$getState$group2;\n        return (_table$getState$group2 = table.getState().grouping) == null ? void 0 : _table$getState$group2.indexOf(column.id);\n      },\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup();\n        return () => {\n          if (!canGroup) return;\n          column.toggleGrouping();\n        };\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n        if (typeof value === 'number') {\n          return aggregationFns.sum;\n        }\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent;\n        }\n      },\n      getAggregationFn: () => {\n        var _table$options$aggreg, _table$options$aggreg2;\n        if (!column) {\n          throw new Error();\n        }\n        return isFunction(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === 'auto' ? column.getAutoAggregationFn() : (_table$options$aggreg = (_table$options$aggreg2 = table.options.aggregationFns) == null ? void 0 : _table$options$aggreg2[column.columnDef.aggregationFn]) != null ? _table$options$aggreg : aggregationFns[column.columnDef.aggregationFn];\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange == null ? void 0 : table.options.onGroupingChange(updater),\n      resetGrouping: defaultState => {\n        var _table$initialState$g, _table$initialState;\n        table.setGrouping(defaultState ? [] : (_table$initialState$g = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.grouping) != null ? _table$initialState$g : []);\n      },\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table);\n        }\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel();\n        }\n        return table._getGroupedRowModel();\n      }\n    };\n  },\n  createRow: row => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {}\n    };\n  },\n  createCell: (cell, column, row, table) => {\n    return {\n      getIsGrouped: () => column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () => {\n        var _row$subRows;\n        return !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n      }\n    };\n  }\n};\nfunction orderColumns(leafColumns, grouping, groupedColumnMode) {\n  if (!(grouping != null && grouping.length) || !groupedColumnMode) {\n    return leafColumns;\n  }\n  const nonGroupingColumns = leafColumns.filter(col => !grouping.includes(col.id));\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns;\n  }\n  const groupingColumns = grouping.map(g => leafColumns.find(col => col.id === g)).filter(Boolean);\n  return [...groupingColumns, ...nonGroupingColumns];\n}\n\n//\n\nconst Ordering = {\n  getInitialState: state => {\n    return {\n      columnOrder: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table)\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange == null ? void 0 : table.options.onColumnOrderChange(updater),\n      resetColumnOrder: defaultState => {\n        var _table$initialState$c;\n        table.setColumnOrder(defaultState ? [] : (_table$initialState$c = table.initialState.columnOrder) != null ? _table$initialState$c : []);\n      },\n      _getOrderColumnsFn: memo(() => [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode], (columnOrder, grouping, groupedColumnMode) => columns => {\n        // Sort grouped columns to the start of the column list\n        // before the headers are built\n        let orderedColumns = [];\n\n        // If there is no order, return the normal columns\n        if (!(columnOrder != null && columnOrder.length)) {\n          orderedColumns = columns;\n        } else {\n          const columnOrderCopy = [...columnOrder];\n\n          // If there is an order, make a copy of the columns\n          const columnsCopy = [...columns];\n\n          // And make a new ordered array of the columns\n\n          // Loop over the columns and place them in order into the new array\n          while (columnsCopy.length && columnOrderCopy.length) {\n            const targetColumnId = columnOrderCopy.shift();\n            const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId);\n            if (foundIndex > -1) {\n              orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);\n            }\n          }\n\n          // If there are any columns left, add them to the end\n          orderedColumns = [...orderedColumns, ...columnsCopy];\n        }\n        return orderColumns(orderedColumns, grouping, groupedColumnMode);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn'\n        // debug: () => table.options.debugAll ?? table.options.debugTable,\n      })\n    };\n  }\n};\n\n//\n\nconst defaultPageIndex = 0;\nconst defaultPageSize = 10;\nconst getDefaultPaginationState = () => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize\n});\nconst Pagination = {\n  getInitialState: state => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...(state == null ? void 0 : state.pagination)\n      }\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table)\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    return {\n      _autoResetPageIndex: () => {\n        var _ref, _table$options$autoRe;\n        if (!registered) {\n          table._queue(() => {\n            registered = true;\n          });\n          return;\n        }\n        if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetPageIndex) != null ? _ref : !table.options.manualPagination) {\n          if (queued) return;\n          queued = true;\n          table._queue(() => {\n            table.resetPageIndex();\n            queued = false;\n          });\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater = old => {\n          let newState = functionalUpdate(updater, old);\n          return newState;\n        };\n        return table.options.onPaginationChange == null ? void 0 : table.options.onPaginationChange(safeUpdater);\n      },\n      resetPagination: defaultState => {\n        var _table$initialState$p;\n        table.setPagination(defaultState ? getDefaultPaginationState() : (_table$initialState$p = table.initialState.pagination) != null ? _table$initialState$p : getDefaultPaginationState());\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex);\n          const maxPageIndex = typeof table.options.pageCount === 'undefined' || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex));\n          return {\n            ...old,\n            pageIndex\n          };\n        });\n      },\n      resetPageIndex: defaultState => {\n        var _table$initialState$p2, _table$initialState, _table$initialState$p3;\n        table.setPageIndex(defaultState ? defaultPageIndex : (_table$initialState$p2 = (_table$initialState = table.initialState) == null ? void 0 : (_table$initialState$p3 = _table$initialState.pagination) == null ? void 0 : _table$initialState$p3.pageIndex) != null ? _table$initialState$p2 : defaultPageIndex);\n      },\n      resetPageSize: defaultState => {\n        var _table$initialState$p4, _table$initialState2, _table$initialState2$;\n        table.setPageSize(defaultState ? defaultPageSize : (_table$initialState$p4 = (_table$initialState2 = table.initialState) == null ? void 0 : (_table$initialState2$ = _table$initialState2.pagination) == null ? void 0 : _table$initialState2$.pageSize) != null ? _table$initialState$p4 : defaultPageSize);\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize));\n          const topRowIndex = old.pageSize * old.pageIndex;\n          const pageIndex = Math.floor(topRowIndex / pageSize);\n          return {\n            ...old,\n            pageIndex,\n            pageSize\n          };\n        });\n      },\n      setPageCount: updater => table.setPagination(old => {\n        var _table$options$pageCo;\n        let newPageCount = functionalUpdate(updater, (_table$options$pageCo = table.options.pageCount) != null ? _table$options$pageCo : -1);\n        if (typeof newPageCount === 'number') {\n          newPageCount = Math.max(-1, newPageCount);\n        }\n        return {\n          ...old,\n          pageCount: newPageCount\n        };\n      }),\n      getPageOptions: memo(() => [table.getPageCount()], pageCount => {\n        let pageOptions = [];\n        if (pageCount && pageCount > 0) {\n          pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i);\n        }\n        return pageOptions;\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n        }\n      }),\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n      getCanNextPage: () => {\n        const {\n          pageIndex\n        } = table.getState().pagination;\n        const pageCount = table.getPageCount();\n        if (pageCount === -1) {\n          return true;\n        }\n        if (pageCount === 0) {\n          return false;\n        }\n        return pageIndex < pageCount - 1;\n      },\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1);\n      },\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1;\n        });\n      },\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {\n          table._getPaginationRowModel = table.options.getPaginationRowModel(table);\n        }\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel();\n        }\n        return table._getPaginationRowModel();\n      },\n      getPageCount: () => {\n        var _table$options$pageCo2;\n        return (_table$options$pageCo2 = table.options.pageCount) != null ? _table$options$pageCo2 : Math.ceil(table.getPrePaginationRowModel().rows.length / table.getState().pagination.pageSize);\n      }\n    };\n  }\n};\n\n//\n\nconst getDefaultPinningState = () => ({\n  left: [],\n  right: []\n});\nconst Pinning = {\n  getInitialState: state => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      pin: position => {\n        const columnIds = column.getLeafColumns().map(d => d.id).filter(Boolean);\n        table.setColumnPinning(old => {\n          var _old$left3, _old$right3;\n          if (position === 'right') {\n            var _old$left, _old$right;\n            return {\n              left: ((_old$left = old == null ? void 0 : old.left) != null ? _old$left : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n              right: [...((_old$right = old == null ? void 0 : old.right) != null ? _old$right : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds]\n            };\n          }\n          if (position === 'left') {\n            var _old$left2, _old$right2;\n            return {\n              left: [...((_old$left2 = old == null ? void 0 : old.left) != null ? _old$left2 : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds],\n              right: ((_old$right2 = old == null ? void 0 : old.right) != null ? _old$right2 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n            };\n          }\n          return {\n            left: ((_old$left3 = old == null ? void 0 : old.left) != null ? _old$left3 : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n            right: ((_old$right3 = old == null ? void 0 : old.right) != null ? _old$right3 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n          };\n        });\n      },\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns();\n        return leafColumns.some(d => {\n          var _d$columnDef$enablePi, _table$options$enable;\n          return ((_d$columnDef$enablePi = d.columnDef.enablePinning) != null ? _d$columnDef$enablePi : true) && ((_table$options$enable = table.options.enablePinning) != null ? _table$options$enable : true);\n        });\n      },\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id);\n        const {\n          left,\n          right\n        } = table.getState().columnPinning;\n        const isLeft = leafColumnIds.some(d => left == null ? void 0 : left.includes(d));\n        const isRight = leafColumnIds.some(d => right == null ? void 0 : right.includes(d));\n        return isLeft ? 'left' : isRight ? 'right' : false;\n      },\n      getPinnedIndex: () => {\n        var _table$getState$colum, _table$getState$colum2, _table$getState$colum3;\n        const position = column.getIsPinned();\n        return position ? (_table$getState$colum = (_table$getState$colum2 = table.getState().columnPinning) == null ? void 0 : (_table$getState$colum3 = _table$getState$colum2[position]) == null ? void 0 : _table$getState$colum3.indexOf(column.id)) != null ? _table$getState$colum : -1 : 0;\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      getCenterVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allCells, left, right) => {\n        const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n        return allCells.filter(d => !leftAndRight.includes(d.column.id));\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getCenterVisibleCells',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n        }\n      }),\n      getLeftVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left,,], (allCells, left) => {\n        const cells = (left != null ? left : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n          ...d,\n          position: 'left'\n        }));\n        return cells;\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n        }\n      }),\n      getRightVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.right], (allCells, right) => {\n        const cells = (right != null ? right : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n          ...d,\n          position: 'right'\n        }));\n        return cells;\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugRows;\n        }\n      })\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnPinning: updater => table.options.onColumnPinningChange == null ? void 0 : table.options.onColumnPinningChange(updater),\n      resetColumnPinning: defaultState => {\n        var _table$initialState$c, _table$initialState;\n        return table.setColumnPinning(defaultState ? getDefaultPinningState() : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnPinning) != null ? _table$initialState$c : getDefaultPinningState());\n      },\n      getIsSomeColumnsPinned: position => {\n        var _pinningState$positio;\n        const pinningState = table.getState().columnPinning;\n        if (!position) {\n          var _pinningState$left, _pinningState$right;\n          return Boolean(((_pinningState$left = pinningState.left) == null ? void 0 : _pinningState$left.length) || ((_pinningState$right = pinningState.right) == null ? void 0 : _pinningState$right.length));\n        }\n        return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\n      },\n      getLeftLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left], (allColumns, left) => {\n        return (left != null ? left : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n        debug: () => {\n          var _table$options$debugA4;\n          return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;\n        }\n      }),\n      getRightLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.right], (allColumns, right) => {\n        return (right != null ? right : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n        debug: () => {\n          var _table$options$debugA5;\n          return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;\n        }\n      }),\n      getCenterLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, left, right) => {\n        const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n        return allColumns.filter(d => !leftAndRight.includes(d.id));\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n        debug: () => {\n          var _table$options$debugA6;\n          return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugColumns;\n        }\n      })\n    };\n  }\n};\n\n//\n\nconst RowSelection = {\n  getInitialState: state => {\n    return {\n      rowSelection: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    };\n  },\n\n  createTable: table => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange == null ? void 0 : table.options.onRowSelectionChange(updater),\n      resetRowSelection: defaultState => {\n        var _table$initialState$r;\n        return table.setRowSelection(defaultState ? {} : (_table$initialState$r = table.initialState.rowSelection) != null ? _table$initialState$r : {});\n      },\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected();\n          const rowSelection = {\n            ...old\n          };\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows;\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return;\n              }\n              rowSelection[row.id] = true;\n            });\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id];\n            });\n          }\n          return rowSelection;\n        });\n      },\n      toggleAllPageRowsSelected: value => table.setRowSelection(old => {\n        const resolvedValue = typeof value !== 'undefined' ? value : !table.getIsAllPageRowsSelected();\n        const rowSelection = {\n          ...old\n        };\n        table.getRowModel().rows.forEach(row => {\n          mutateRowIsSelected(rowSelection, row.id, resolvedValue, table);\n        });\n        return rowSelection;\n      }),\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(() => [table.getState().rowSelection, table.getCoreRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n        }\n      }),\n      getFilteredSelectedRowModel: memo(() => [table.getState().rowSelection, table.getFilteredRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getFilteredSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugTable;\n        }\n      }),\n      getGroupedSelectedRowModel: memo(() => [table.getState().rowSelection, table.getSortedRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getGroupedSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugTable;\n        }\n      }),\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows;\n        const {\n          rowSelection\n        } = table.getState();\n        let isAllRowsSelected = Boolean(preGroupedFlatRows.length && Object.keys(rowSelection).length);\n        if (isAllRowsSelected) {\n          if (preGroupedFlatRows.some(row => row.getCanSelect() && !rowSelection[row.id])) {\n            isAllRowsSelected = false;\n          }\n        }\n        return isAllRowsSelected;\n      },\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows;\n        const {\n          rowSelection\n        } = table.getState();\n        let isAllPageRowsSelected = !!paginationFlatRows.length;\n        if (isAllPageRowsSelected && paginationFlatRows.some(row => !rowSelection[row.id])) {\n          isAllPageRowsSelected = false;\n        }\n        return isAllPageRowsSelected;\n      },\n      getIsSomeRowsSelected: () => {\n        var _table$getState$rowSe;\n        const totalSelected = Object.keys((_table$getState$rowSe = table.getState().rowSelection) != null ? _table$getState$rowSe : {}).length;\n        return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;\n      },\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows;\n        return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.some(d => d.getIsSelected() || d.getIsSomeSelected());\n      },\n      getToggleAllRowsSelectedHandler: () => {\n        return e => {\n          table.toggleAllRowsSelected(e.target.checked);\n        };\n      },\n      getToggleAllPageRowsSelectedHandler: () => {\n        return e => {\n          table.toggleAllPageRowsSelected(e.target.checked);\n        };\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected();\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected;\n          if (isSelected === value) {\n            return old;\n          }\n          const selectedRowIds = {\n            ...old\n          };\n          mutateRowIsSelected(selectedRowIds, row.id, value, table);\n          return selectedRowIds;\n        });\n      },\n      getIsSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isRowSelected(row, rowSelection);\n      },\n      getIsSomeSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isSubRowSelected(row, rowSelection) === 'some';\n      },\n      getIsAllSubRowsSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isSubRowSelected(row, rowSelection) === 'all';\n      },\n      getCanSelect: () => {\n        var _table$options$enable;\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row);\n        }\n        return (_table$options$enable = table.options.enableRowSelection) != null ? _table$options$enable : true;\n      },\n      getCanSelectSubRows: () => {\n        var _table$options$enable2;\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row);\n        }\n        return (_table$options$enable2 = table.options.enableSubRowSelection) != null ? _table$options$enable2 : true;\n      },\n      getCanMultiSelect: () => {\n        var _table$options$enable3;\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row);\n        }\n        return (_table$options$enable3 = table.options.enableMultiRowSelection) != null ? _table$options$enable3 : true;\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect();\n        return e => {\n          var _target;\n          if (!canSelect) return;\n          row.toggleSelected((_target = e.target) == null ? void 0 : _target.checked);\n        };\n      }\n    };\n  }\n};\nconst mutateRowIsSelected = (selectedRowIds, id, value, table) => {\n  var _row$subRows;\n  const row = table.getRow(id);\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key]);\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true;\n    }\n  } else {\n    delete selectedRowIds[id];\n  }\n  // }\n\n  if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row => mutateRowIsSelected(selectedRowIds, row.id, value, table));\n  }\n};\nfunction selectRowsFn(table, rowModel) {\n  const rowSelection = table.getState().rowSelection;\n  const newSelectedFlatRows = [];\n  const newSelectedRowsById = {};\n\n  // Filters top level and nested rows\n  const recurseRows = function (rows, depth) {\n    return rows.map(row => {\n      var _row$subRows2;\n      const isSelected = isRowSelected(row, rowSelection);\n      if (isSelected) {\n        newSelectedFlatRows.push(row);\n        newSelectedRowsById[row.id] = row;\n      }\n      if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {\n        row = {\n          ...row,\n          subRows: recurseRows(row.subRows)\n        };\n      }\n      if (isSelected) {\n        return row;\n      }\n    }).filter(Boolean);\n  };\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById\n  };\n}\nfunction isRowSelected(row, selection) {\n  var _selection$row$id;\n  return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false;\n}\nfunction isSubRowSelected(row, selection, table) {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true;\n    let someSelected = false;\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return;\n      }\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    });\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false;\n  }\n  return false;\n}\n\nconst reSplitAlphaNumeric = /([0-9]+)/gm;\nconst alphanumeric = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\nconst alphanumericCaseSensitive = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\nconst datetime = (rowA, rowB, columnId) => {\n  const a = rowA.getValue(columnId);\n  const b = rowB.getValue(columnId);\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0;\n};\nconst basic = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));\n};\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n    return String(a);\n  }\n  if (typeof a === 'string') {\n    return a;\n  }\n  return '';\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr, bStr) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean);\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean);\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift();\n    const bb = b.shift();\n    const an = parseInt(aa, 10);\n    const bn = parseInt(bb, 10);\n    const combo = [an, bn].sort();\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n      if (bb > aa) {\n        return -1;\n      }\n      continue;\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1;\n    }\n    if (bn > an) {\n      return -1;\n    }\n  }\n  return a.length - b.length;\n}\n\n// Exports\n\nconst sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic\n};\n\n//\n\nconst Sorting = {\n  getInitialState: state => {\n    return {\n      sorting: [],\n      ...state\n    };\n  },\n  getDefaultColumnDef: () => {\n    return {\n      sortingFn: 'auto'\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: e => {\n        return e.shiftKey;\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10);\n        let isString = false;\n        for (const row of firstRows) {\n          const value = row == null ? void 0 : row.getValue(column.id);\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime;\n          }\n          if (typeof value === 'string') {\n            isString = true;\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric;\n            }\n          }\n        }\n        if (isString) {\n          return sortingFns.text;\n        }\n        return sortingFns.basic;\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n        if (typeof value === 'string') {\n          return 'asc';\n        }\n        return 'desc';\n      },\n      getSortingFn: () => {\n        var _table$options$sortin, _table$options$sortin2;\n        if (!column) {\n          throw new Error();\n        }\n        return isFunction(column.columnDef.sortingFn) ? column.columnDef.sortingFn : column.columnDef.sortingFn === 'auto' ? column.getAutoSortingFn() : (_table$options$sortin = (_table$options$sortin2 = table.options.sortingFns) == null ? void 0 : _table$options$sortin2[column.columnDef.sortingFn]) != null ? _table$options$sortin : sortingFns[column.columnDef.sortingFn];\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder();\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null;\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old == null ? void 0 : old.find(d => d.id === column.id);\n          const existingIndex = old == null ? void 0 : old.findIndex(d => d.id === column.id);\n          let newSorting = [];\n\n          // What should we do with this sort action?\n          let sortAction;\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc';\n\n          // Multi-mode\n          if (old != null && old.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'add';\n            }\n          } else {\n            // Normal mode\n            if (old != null && old.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace';\n            } else if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'replace';\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove';\n              }\n            }\n          }\n          if (sortAction === 'add') {\n            var _table$options$maxMul;\n            newSorting = [...old, {\n              id: column.id,\n              desc: nextDesc\n            }];\n            // Take latest n columns\n            newSorting.splice(0, newSorting.length - ((_table$options$maxMul = table.options.maxMultiSortColCount) != null ? _table$options$maxMul : Number.MAX_SAFE_INTEGER));\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc\n                };\n              }\n              return d;\n            });\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id);\n          } else {\n            newSorting = [{\n              id: column.id,\n              desc: nextDesc\n            }];\n          }\n          return newSorting;\n        });\n      },\n      getFirstSortDir: () => {\n        var _ref, _column$columnDef$sor;\n        const sortDescFirst = (_ref = (_column$columnDef$sor = column.columnDef.sortDescFirst) != null ? _column$columnDef$sor : table.options.sortDescFirst) != null ? _ref : column.getAutoSortDir() === 'desc';\n        return sortDescFirst ? 'desc' : 'asc';\n      },\n      getNextSortingOrder: multi => {\n        var _table$options$enable, _table$options$enable2;\n        const firstSortDirection = column.getFirstSortDir();\n        const isSorted = column.getIsSorted();\n        if (!isSorted) {\n          return firstSortDirection;\n        }\n        if (isSorted !== firstSortDirection && ((_table$options$enable = table.options.enableSortingRemoval) != null ? _table$options$enable : true) && (\n        // If enableSortRemove, enable in general\n        multi ? (_table$options$enable2 = table.options.enableMultiRemove) != null ? _table$options$enable2 : true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false;\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc';\n      },\n      getCanSort: () => {\n        var _column$columnDef$ena, _table$options$enable3;\n        return ((_column$columnDef$ena = column.columnDef.enableSorting) != null ? _column$columnDef$ena : true) && ((_table$options$enable3 = table.options.enableSorting) != null ? _table$options$enable3 : true) && !!column.accessorFn;\n      },\n      getCanMultiSort: () => {\n        var _ref2, _column$columnDef$ena2;\n        return (_ref2 = (_column$columnDef$ena2 = column.columnDef.enableMultiSort) != null ? _column$columnDef$ena2 : table.options.enableMultiSort) != null ? _ref2 : !!column.accessorFn;\n      },\n      getIsSorted: () => {\n        var _table$getState$sorti;\n        const columnSort = (_table$getState$sorti = table.getState().sorting) == null ? void 0 : _table$getState$sorti.find(d => d.id === column.id);\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc';\n      },\n      getSortIndex: () => {\n        var _table$getState$sorti2, _table$getState$sorti3;\n        return (_table$getState$sorti2 = (_table$getState$sorti3 = table.getState().sorting) == null ? void 0 : _table$getState$sorti3.findIndex(d => d.id === column.id)) != null ? _table$getState$sorti2 : -1;\n      },\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old => old != null && old.length ? old.filter(d => d.id !== column.id) : []);\n      },\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort();\n        return e => {\n          if (!canSort) return;\n          e.persist == null ? void 0 : e.persist();\n          column.toggleSorting == null ? void 0 : column.toggleSorting(undefined, column.getCanMultiSort() ? table.options.isMultiSortEvent == null ? void 0 : table.options.isMultiSortEvent(e) : false);\n        };\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setSorting: updater => table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater),\n      resetSorting: defaultState => {\n        var _table$initialState$s, _table$initialState;\n        table.setSorting(defaultState ? [] : (_table$initialState$s = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.sorting) != null ? _table$initialState$s : []);\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table);\n        }\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel();\n        }\n        return table._getSortedRowModel();\n      }\n    };\n  }\n};\n\n//\n\nconst Visibility = {\n  getInitialState: state => {\n    return {\n      columnVisibility: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value != null ? value : !column.getIsVisible()\n          }));\n        }\n      },\n      getIsVisible: () => {\n        var _table$getState$colum, _table$getState$colum2;\n        return (_table$getState$colum = (_table$getState$colum2 = table.getState().columnVisibility) == null ? void 0 : _table$getState$colum2[column.id]) != null ? _table$getState$colum : true;\n      },\n      getCanHide: () => {\n        var _column$columnDef$ena, _table$options$enable;\n        return ((_column$columnDef$ena = column.columnDef.enableHiding) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableHiding) != null ? _table$options$enable : true);\n      },\n      getToggleVisibilityHandler: () => {\n        return e => {\n          column.toggleVisibility == null ? void 0 : column.toggleVisibility(e.target.checked);\n        };\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      _getAllVisibleCells: memo(() => [row.getAllCells(), table.getState().columnVisibility], cells => {\n        return cells.filter(cell => cell.column.getIsVisible());\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n        }\n      }),\n      getVisibleCells: memo(() => [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()], (left, center, right) => [...left, ...center, ...right], {\n        key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n        }\n      })\n    };\n  },\n  createTable: table => {\n    const makeVisibleColumnsMethod = (key, getColumns) => {\n      return memo(() => [getColumns(), getColumns().filter(d => d.getIsVisible()).map(d => d.id).join('_')], columns => {\n        return columns.filter(d => d.getIsVisible == null ? void 0 : d.getIsVisible());\n      }, {\n        key,\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;\n        }\n      });\n    };\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod('getVisibleFlatColumns', () => table.getAllFlatColumns()),\n      getVisibleLeafColumns: makeVisibleColumnsMethod('getVisibleLeafColumns', () => table.getAllLeafColumns()),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod('getLeftVisibleLeafColumns', () => table.getLeftLeafColumns()),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod('getRightVisibleLeafColumns', () => table.getRightLeafColumns()),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod('getCenterVisibleLeafColumns', () => table.getCenterLeafColumns()),\n      setColumnVisibility: updater => table.options.onColumnVisibilityChange == null ? void 0 : table.options.onColumnVisibilityChange(updater),\n      resetColumnVisibility: defaultState => {\n        var _table$initialState$c;\n        table.setColumnVisibility(defaultState ? {} : (_table$initialState$c = table.initialState.columnVisibility) != null ? _table$initialState$c : {});\n      },\n      toggleAllColumnsVisible: value => {\n        var _value;\n        value = (_value = value) != null ? _value : !table.getIsAllColumnsVisible();\n        table.setColumnVisibility(table.getAllLeafColumns().reduce((obj, column) => ({\n          ...obj,\n          [column.id]: !value ? !(column.getCanHide != null && column.getCanHide()) : value\n        }), {}));\n      },\n      getIsAllColumnsVisible: () => !table.getAllLeafColumns().some(column => !(column.getIsVisible != null && column.getIsVisible())),\n      getIsSomeColumnsVisible: () => table.getAllLeafColumns().some(column => column.getIsVisible == null ? void 0 : column.getIsVisible()),\n      getToggleAllColumnsVisibilityHandler: () => {\n        return e => {\n          var _target;\n          table.toggleAllColumnsVisible((_target = e.target) == null ? void 0 : _target.checked);\n        };\n      }\n    };\n  }\n};\n\nconst features = [Headers, Visibility, Ordering, Pinning, Filters, Sorting, Grouping, Expanding, Pagination, RowSelection, ColumnSizing];\n\n//\n\nfunction createTable(options) {\n  var _options$initialState;\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...');\n  }\n  let table = {\n    _features: features\n  };\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));\n  }, {});\n  const mergeOptions = options => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options);\n    }\n    return {\n      ...defaultOptions,\n      ...options\n    };\n  };\n  const coreInitialState = {};\n  let initialState = {\n    ...coreInitialState,\n    ...((_options$initialState = options.initialState) != null ? _options$initialState : {})\n  };\n  table._features.forEach(feature => {\n    var _feature$getInitialSt;\n    initialState = (_feature$getInitialSt = feature.getInitialState == null ? void 0 : feature.getInitialState(initialState)) != null ? _feature$getInitialSt : initialState;\n  });\n  const queued = [];\n  let queuedTimeout = false;\n  const coreInstance = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb);\n      if (!queuedTimeout) {\n        queuedTimeout = true;\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve().then(() => {\n          while (queued.length) {\n            queued.shift()();\n          }\n          queuedTimeout = false;\n        }).catch(error => setTimeout(() => {\n          throw error;\n        }));\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState);\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options);\n      table.options = mergeOptions(newOptions);\n    },\n    getState: () => {\n      return table.options.state;\n    },\n    setState: updater => {\n      table.options.onStateChange == null ? void 0 : table.options.onStateChange(updater);\n    },\n    _getRowId: (row, index, parent) => {\n      var _table$options$getRow;\n      return (_table$options$getRow = table.options.getRowId == null ? void 0 : table.options.getRowId(row, index, parent)) != null ? _table$options$getRow : `${parent ? [parent.id, index].join('.') : index}`;\n    },\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table);\n      }\n      return table._getCoreRowModel();\n    },\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel();\n    },\n    getRow: id => {\n      const row = table.getRowModel().rowsById[id];\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`);\n        }\n        throw new Error();\n      }\n      return row;\n    },\n    _getDefaultColumnDef: memo(() => [table.options.defaultColumn], defaultColumn => {\n      var _defaultColumn;\n      defaultColumn = (_defaultColumn = defaultColumn) != null ? _defaultColumn : {};\n      return {\n        header: props => {\n          const resolvedColumnDef = props.header.column.columnDef;\n          if (resolvedColumnDef.accessorKey) {\n            return resolvedColumnDef.accessorKey;\n          }\n          if (resolvedColumnDef.accessorFn) {\n            return resolvedColumnDef.id;\n          }\n          return null;\n        },\n        // footer: props => props.header.column.id,\n        cell: props => {\n          var _props$renderValue$to, _props$renderValue;\n          return (_props$renderValue$to = (_props$renderValue = props.renderValue()) == null ? void 0 : _props$renderValue.toString == null ? void 0 : _props$renderValue.toString()) != null ? _props$renderValue$to : null;\n        },\n        ...table._features.reduce((obj, feature) => {\n          return Object.assign(obj, feature.getDefaultColumnDef == null ? void 0 : feature.getDefaultColumnDef());\n        }, {}),\n        ...defaultColumn\n      };\n    }, {\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;\n      },\n      key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef'\n    }),\n    _getColumnDefs: () => table.options.columns,\n    getAllColumns: memo(() => [table._getColumnDefs()], columnDefs => {\n      const recurseColumns = function (columnDefs, parent, depth) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n        return columnDefs.map(columnDef => {\n          const column = createColumn(table, columnDef, depth, parent);\n          const groupingColumnDef = columnDef;\n          column.columns = groupingColumnDef.columns ? recurseColumns(groupingColumnDef.columns, column, depth + 1) : [];\n          return column;\n        });\n      };\n      return recurseColumns(columnDefs);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;\n      }\n    }),\n    getAllFlatColumns: memo(() => [table.getAllColumns()], allColumns => {\n      return allColumns.flatMap(column => {\n        return column.getFlatColumns();\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n      debug: () => {\n        var _table$options$debugA3;\n        return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;\n      }\n    }),\n    _getAllFlatColumnsById: memo(() => [table.getAllFlatColumns()], flatColumns => {\n      return flatColumns.reduce((acc, column) => {\n        acc[column.id] = column;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n      debug: () => {\n        var _table$options$debugA4;\n        return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;\n      }\n    }),\n    getAllLeafColumns: memo(() => [table.getAllColumns(), table._getOrderColumnsFn()], (allColumns, orderColumns) => {\n      let leafColumns = allColumns.flatMap(column => column.getLeafColumns());\n      return orderColumns(leafColumns);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n      debug: () => {\n        var _table$options$debugA5;\n        return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;\n      }\n    }),\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId];\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`);\n        }\n        throw new Error();\n      }\n      return column;\n    }\n  };\n  Object.assign(table, coreInstance);\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable == null ? void 0 : feature.createTable(table));\n  });\n  return table;\n}\n\nfunction createCell(table, row, column, columnId) {\n  const getRenderValue = () => {\n    var _cell$getValue;\n    return (_cell$getValue = cell.getValue()) != null ? _cell$getValue : table.options.renderFallbackValue;\n  };\n  const cell = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(() => [table, column, row, cell], (table, column, row, cell) => ({\n      table,\n      column,\n      row,\n      cell: cell,\n      getValue: cell.getValue,\n      renderValue: cell.renderValue\n    }), {\n      key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n      debug: () => table.options.debugAll\n    })\n  };\n  table._features.forEach(feature => {\n    Object.assign(cell, feature.createCell == null ? void 0 : feature.createCell(cell, column, row, table));\n  }, {});\n  return cell;\n}\n\nconst createRow = (table, id, original, rowIndex, depth, subRows) => {\n  let row = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!column.accessorFn) {\n        return undefined;\n      }\n      row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex);\n      return row._valuesCache[columnId];\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!column.accessorFn) {\n        return undefined;\n      }\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)];\n        return row._uniqueValuesCache[columnId];\n      }\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(row.original, rowIndex);\n      return row._uniqueValuesCache[columnId];\n    },\n    renderValue: columnId => {\n      var _row$getValue;\n      return (_row$getValue = row.getValue(columnId)) != null ? _row$getValue : table.options.renderFallbackValue;\n    },\n    subRows: subRows != null ? subRows : [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(() => [table.getAllLeafColumns()], leafColumns => {\n      return leafColumns.map(column => {\n        return createCell(table, row, column, column.id);\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n      }\n    }),\n    _getAllCellsByColumnId: memo(() => [row.getAllCells()], allCells => {\n      return allCells.reduce((acc, cell) => {\n        acc[cell.column.id] = cell;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n      }\n    })\n  };\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i];\n    Object.assign(row, feature == null ? void 0 : feature.createRow == null ? void 0 : feature.createRow(row, table));\n  }\n  return row;\n};\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nfunction createColumnHelper() {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function' ? {\n        ...column,\n        accessorFn: accessor\n      } : {\n        ...column,\n        accessorKey: accessor\n      };\n    },\n    display: column => column,\n    group: column => column\n  };\n}\n\nfunction getCoreRowModel() {\n  return table => memo(() => [table.options.data], data => {\n    const rowModel = {\n      rows: [],\n      flatRows: [],\n      rowsById: {}\n    };\n    const accessRows = function (originalRows, depth, parent) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      const rows = [];\n      for (let i = 0; i < originalRows.length; i++) {\n        // This could be an expensive check at scale, so we should move it somewhere else, but where?\n        // if (!id) {\n        //   if (process.env.NODE_ENV !== 'production') {\n        //     throw new Error(`getRowId expected an ID, but got ${id}`)\n        //   }\n        // }\n\n        // Make the row\n        const row = createRow(table, table._getRowId(originalRows[i], i, parent), originalRows[i], i, depth);\n\n        // Keep track of every row in a flat array\n        rowModel.flatRows.push(row);\n        // Also keep track of every row by its ID\n        rowModel.rowsById[row.id] = row;\n        // Push table row into parent\n        rows.push(row);\n\n        // Get the original subrows\n        if (table.options.getSubRows) {\n          var _row$originalSubRows;\n          row.originalSubRows = table.options.getSubRows(originalRows[i], i);\n\n          // Then recursively access them\n          if ((_row$originalSubRows = row.originalSubRows) != null && _row$originalSubRows.length) {\n            row.subRows = accessRows(row.originalSubRows, depth + 1, row);\n          }\n        }\n      }\n      return rows;\n    };\n    rowModel.rows = accessRows(data);\n    return rowModel;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction filterRows(rows, filterRowImpl, table) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table);\n  }\n  return filterRowModelFromRoot(rows, filterRowImpl, table);\n}\nfunction filterRowModelFromLeafs(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea : 100;\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    const rows = [];\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      var _row$subRows;\n      let row = rowsToFilter[i];\n      const newRow = createRow(table, row.id, row.original, row.index, row.depth);\n      newRow.columnFilters = row.columnFilters;\n      if ((_row$subRows = row.subRows) != null && _row$subRows.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n        row = newRow;\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredRowsById[i] = row;\n          continue;\n        }\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredRowsById[i] = row;\n          continue;\n        }\n      } else {\n        row = newRow;\n        if (filterRow(row)) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredRowsById[i] = row;\n        }\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\nfunction filterRowModelFromRoot(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea2;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea2 = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea2 : 100;\n\n  // Filters top level and nested rows\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    // Filter from parents downward first\n\n    const rows = [];\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i];\n      const pass = filterRow(row);\n      if (pass) {\n        var _row$subRows2;\n        if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length && depth < maxDepth) {\n          const newRow = createRow(table, row.id, row.original, row.index, row.depth);\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n          row = newRow;\n        }\n        rows.push(row);\n        newFilteredFlatRows.push(row);\n        newFilteredRowsById[row.id] = row;\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\n\nfunction getFilteredRowModel() {\n  return table => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter], (rowModel, columnFilters, globalFilter) => {\n    if (!rowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      for (let i = 0; i < rowModel.flatRows.length; i++) {\n        rowModel.flatRows[i].columnFilters = {};\n        rowModel.flatRows[i].columnFiltersMeta = {};\n      }\n      return rowModel;\n    }\n    const resolvedColumnFilters = [];\n    const resolvedGlobalFilters = [];\n    (columnFilters != null ? columnFilters : []).forEach(d => {\n      var _filterFn$resolveFilt;\n      const column = table.getColumn(d.id);\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Table: Could not find a column to filter with columnId: ${d.id}`);\n        }\n      }\n      const filterFn = column.getFilterFn();\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`);\n        }\n        return;\n      }\n      resolvedColumnFilters.push({\n        id: d.id,\n        filterFn,\n        resolvedValue: (_filterFn$resolveFilt = filterFn.resolveFilterValue == null ? void 0 : filterFn.resolveFilterValue(d.value)) != null ? _filterFn$resolveFilt : d.value\n      });\n    });\n    const filterableIds = columnFilters.map(d => d.id);\n    const globalFilterFn = table.getGlobalFilterFn();\n    const globallyFilterableColumns = table.getAllLeafColumns().filter(column => column.getCanGlobalFilter());\n    if (globalFilter && globalFilterFn && globallyFilterableColumns.length) {\n      filterableIds.push('__global__');\n      globallyFilterableColumns.forEach(column => {\n        var _globalFilterFn$resol;\n        resolvedGlobalFilters.push({\n          id: column.id,\n          filterFn: globalFilterFn,\n          resolvedValue: (_globalFilterFn$resol = globalFilterFn.resolveFilterValue == null ? void 0 : globalFilterFn.resolveFilterValue(globalFilter)) != null ? _globalFilterFn$resol : globalFilter\n        });\n      });\n    }\n    let currentColumnFilter;\n    let currentGlobalFilter;\n\n    // Flag the prefiltered row model with each filter state\n    for (let j = 0; j < rowModel.flatRows.length; j++) {\n      const row = rowModel.flatRows[j];\n      row.columnFilters = {};\n      if (resolvedColumnFilters.length) {\n        for (let i = 0; i < resolvedColumnFilters.length; i++) {\n          currentColumnFilter = resolvedColumnFilters[i];\n          const id = currentColumnFilter.id;\n\n          // Tag the row with the column filter state\n          row.columnFilters[id] = currentColumnFilter.filterFn(row, id, currentColumnFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          });\n        }\n      }\n      if (resolvedGlobalFilters.length) {\n        for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n          currentGlobalFilter = resolvedGlobalFilters[i];\n          const id = currentGlobalFilter.id;\n          // Tag the row with the first truthy global filter state\n          if (currentGlobalFilter.filterFn(row, id, currentGlobalFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          })) {\n            row.columnFilters.__global__ = true;\n            break;\n          }\n        }\n        if (row.columnFilters.__global__ !== true) {\n          row.columnFilters.__global__ = false;\n        }\n      }\n    }\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    // Filter final rows using all of the active filters\n    return filterRows(rowModel.rows, filterRowsImpl, table);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction getFacetedRowModel() {\n  return (table, columnId) => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter, table.getFilteredRowModel()], (preRowModel, columnFilters, globalFilter) => {\n    if (!preRowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      return preRowModel;\n    }\n    const filterableIds = [...columnFilters.map(d => d.id).filter(d => d !== columnId), globalFilter ? '__global__' : undefined].filter(Boolean);\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return filterRows(preRowModel.rows, filterRowsImpl, table);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedRowModel_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\n\nfunction getFacetedUniqueValues() {\n  return (table, columnId) => memo(() => [table.getColumn(columnId).getFacetedRowModel()], facetedRowModel => {\n    let facetedUniqueValues = new Map();\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n      for (let j = 0; j < values.length; j++) {\n        const value = values[j];\n        if (facetedUniqueValues.has(value)) {\n          var _facetedUniqueValues$;\n          facetedUniqueValues.set(value, ((_facetedUniqueValues$ = facetedUniqueValues.get(value)) != null ? _facetedUniqueValues$ : 0) + 1);\n        } else {\n          facetedUniqueValues.set(value, 1);\n        }\n      }\n    }\n    return facetedUniqueValues;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedUniqueValues_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\n\nfunction getFacetedMinMaxValues() {\n  return (table, columnId) => memo(() => [table.getColumn(columnId).getFacetedRowModel()], facetedRowModel => {\n    var _facetedRowModel$flat;\n    const firstValue = (_facetedRowModel$flat = facetedRowModel.flatRows[0]) == null ? void 0 : _facetedRowModel$flat.getUniqueValues(columnId);\n    if (typeof firstValue === 'undefined') {\n      return undefined;\n    }\n    let facetedMinMaxValues = [firstValue, firstValue];\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n      for (let j = 0; j < values.length; j++) {\n        const value = values[j];\n        if (value < facetedMinMaxValues[0]) {\n          facetedMinMaxValues[0] = value;\n        } else if (value > facetedMinMaxValues[1]) {\n          facetedMinMaxValues[1] = value;\n        }\n      }\n    }\n    return facetedMinMaxValues;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedMinMaxValues_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\n\nfunction getSortedRowModel() {\n  return table => memo(() => [table.getState().sorting, table.getPreSortedRowModel()], (sorting, rowModel) => {\n    if (!rowModel.rows.length || !(sorting != null && sorting.length)) {\n      return rowModel;\n    }\n    const sortingState = table.getState().sorting;\n    const sortedFlatRows = [];\n\n    // Filter out sortings that correspond to non existing columns\n    const availableSorting = sortingState.filter(sort => table.getColumn(sort.id).getCanSort());\n    const columnInfoById = {};\n    availableSorting.forEach(sortEntry => {\n      const column = table.getColumn(sortEntry.id);\n      columnInfoById[sortEntry.id] = {\n        sortUndefined: column.columnDef.sortUndefined,\n        invertSorting: column.columnDef.invertSorting,\n        sortingFn: column.getSortingFn()\n      };\n    });\n    const sortData = rows => {\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = [...rows];\n      sortedData.sort((rowA, rowB) => {\n        for (let i = 0; i < availableSorting.length; i += 1) {\n          var _sortEntry$desc;\n          const sortEntry = availableSorting[i];\n          const columnInfo = columnInfoById[sortEntry.id];\n          const isDesc = (_sortEntry$desc = sortEntry == null ? void 0 : sortEntry.desc) != null ? _sortEntry$desc : false;\n          if (columnInfo.sortUndefined) {\n            const aValue = rowA.getValue(sortEntry.id);\n            const bValue = rowB.getValue(sortEntry.id);\n            const aUndefined = typeof aValue === 'undefined';\n            const bUndefined = typeof bValue === 'undefined';\n            if (aUndefined || bUndefined) {\n              return aUndefined && bUndefined ? 0 : aUndefined ? columnInfo.sortUndefined : -columnInfo.sortUndefined;\n            }\n          }\n\n          // This function should always return in ascending order\n          let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id);\n          if (sortInt !== 0) {\n            if (isDesc) {\n              sortInt *= -1;\n            }\n            if (columnInfo.invertSorting) {\n              sortInt *= -1;\n            }\n            return sortInt;\n          }\n        }\n        return rowA.index - rowB.index;\n      });\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        var _row$subRows;\n        sortedFlatRows.push(row);\n        if ((_row$subRows = row.subRows) != null && _row$subRows.length) {\n          row.subRows = sortData(row.subRows);\n        }\n      });\n      return sortedData;\n    };\n    return {\n      rows: sortData(rowModel.rows),\n      flatRows: sortedFlatRows,\n      rowsById: rowModel.rowsById\n    };\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction getGroupedRowModel() {\n  return table => memo(() => [table.getState().grouping, table.getPreGroupedRowModel()], (grouping, rowModel) => {\n    if (!rowModel.rows.length || !grouping.length) {\n      return rowModel;\n    }\n\n    // Filter the grouping list down to columns that exist\n    const existingGrouping = grouping.filter(columnId => table.getColumn(columnId));\n    const groupedFlatRows = [];\n    const groupedRowsById = {};\n    // const onlyGroupedFlatRows: Row[] = [];\n    // const onlyGroupedRowsById: Record<RowId, Row> = {};\n    // const nonGroupedFlatRows: Row[] = [];\n    // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n    // Recursively group the data\n    const groupUpRecursively = function (rows, depth, parentId) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      // Grouping depth has been been met\n      // Stop grouping and simply rewrite thd depth and row relationships\n      if (depth >= existingGrouping.length) {\n        return rows.map(row => {\n          row.depth = depth;\n          groupedFlatRows.push(row);\n          groupedRowsById[row.id] = row;\n          if (row.subRows) {\n            row.subRows = groupUpRecursively(row.subRows, depth + 1);\n          }\n          return row;\n        });\n      }\n      const columnId = existingGrouping[depth];\n\n      // Group the rows together for this level\n      const rowGroupsMap = groupBy(rows, columnId);\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map((_ref, index) => {\n        let [groupingValue, groupedRows] = _ref;\n        let id = `${columnId}:${groupingValue}`;\n        id = parentId ? `${parentId}>${id}` : id;\n\n        // First, Recurse to group sub rows before aggregation\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id);\n\n        // Flatten the leaf rows of the rows in this group\n        const leafRows = depth ? flattenBy(groupedRows, row => row.subRows) : groupedRows;\n        const row = createRow(table, id, leafRows[0].original, index, depth);\n        Object.assign(row, {\n          groupingColumnId: columnId,\n          groupingValue,\n          subRows,\n          leafRows,\n          getValue: columnId => {\n            // Don't aggregate columns that are in the grouping\n            if (existingGrouping.includes(columnId)) {\n              if (row._valuesCache.hasOwnProperty(columnId)) {\n                return row._valuesCache[columnId];\n              }\n              if (groupedRows[0]) {\n                var _groupedRows$0$getVal;\n                row._valuesCache[columnId] = (_groupedRows$0$getVal = groupedRows[0].getValue(columnId)) != null ? _groupedRows$0$getVal : undefined;\n              }\n              return row._valuesCache[columnId];\n            }\n            if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n              return row._groupingValuesCache[columnId];\n            }\n\n            // Aggregate the values\n            const column = table.getColumn(columnId);\n            const aggregateFn = column.getAggregationFn();\n            if (aggregateFn) {\n              row._groupingValuesCache[columnId] = aggregateFn(columnId, leafRows, groupedRows);\n              return row._groupingValuesCache[columnId];\n            }\n          }\n        });\n        subRows.forEach(subRow => {\n          groupedFlatRows.push(subRow);\n          groupedRowsById[subRow.id] = subRow;\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        });\n\n        return row;\n      });\n      return aggregatedGroupedRows;\n    };\n    const groupedRows = groupUpRecursively(rowModel.rows, 0, '');\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow);\n      groupedRowsById[subRow.id] = subRow;\n      // if (subRow.getIsGrouped?.()) {\n      //   onlyGroupedFlatRows.push(subRow);\n      //   onlyGroupedRowsById[subRow.id] = subRow;\n      // } else {\n      //   nonGroupedFlatRows.push(subRow);\n      //   nonGroupedRowsById[subRow.id] = subRow;\n      // }\n    });\n\n    return {\n      rows: groupedRows,\n      flatRows: groupedFlatRows,\n      rowsById: groupedRowsById\n    };\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._queue(() => {\n        table._autoResetExpanded();\n        table._autoResetPageIndex();\n      });\n    }\n  });\n}\nfunction groupBy(rows, columnId) {\n  const groupMap = new Map();\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`;\n    const previous = map.get(resKey);\n    if (!previous) {\n      map.set(resKey, [row]);\n    } else {\n      previous.push(row);\n    }\n    return map;\n  }, groupMap);\n}\n\nfunction getExpandedRowModel() {\n  return table => memo(() => [table.getState().expanded, table.getPreExpandedRowModel(), table.options.paginateExpandedRows], (expanded, rowModel, paginateExpandedRows) => {\n    if (!rowModel.rows.length || expanded !== true && !Object.keys(expanded != null ? expanded : {}).length) {\n      return rowModel;\n    }\n    if (!paginateExpandedRows) {\n      // Only expand rows at this point if they are being paginated\n      return rowModel;\n    }\n    return expandRows(rowModel);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    }\n  });\n}\nfunction expandRows(rowModel) {\n  const expandedRows = [];\n  const handleRow = row => {\n    var _row$subRows;\n    expandedRows.push(row);\n    if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n  rowModel.rows.forEach(handleRow);\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById\n  };\n}\n\nfunction getPaginationRowModel(opts) {\n  return table => memo(() => [table.getState().pagination, table.getPrePaginationRowModel(), table.options.paginateExpandedRows ? undefined : table.getState().expanded], (pagination, rowModel) => {\n    if (!rowModel.rows.length) {\n      return rowModel;\n    }\n    const {\n      pageSize,\n      pageIndex\n    } = pagination;\n    let {\n      rows,\n      flatRows,\n      rowsById\n    } = rowModel;\n    const pageStart = pageSize * pageIndex;\n    const pageEnd = pageStart + pageSize;\n    rows = rows.slice(pageStart, pageEnd);\n    let paginatedRowModel;\n    if (!table.options.paginateExpandedRows) {\n      paginatedRowModel = expandRows({\n        rows,\n        flatRows,\n        rowsById\n      });\n    } else {\n      paginatedRowModel = {\n        rows,\n        flatRows,\n        rowsById\n      };\n    }\n    paginatedRowModel.flatRows = [];\n    const handleRow = row => {\n      paginatedRowModel.flatRows.push(row);\n      if (row.subRows.length) {\n        row.subRows.forEach(handleRow);\n      }\n    };\n    paginatedRowModel.rows.forEach(handleRow);\n    return paginatedRowModel;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    }\n  });\n}\n\nexport { ColumnSizing, Expanding, Filters, Grouping, Headers, Ordering, Pagination, Pinning, RowSelection, Sorting, Visibility, aggregationFns, buildHeaderGroups, createCell, createColumn, createColumnHelper, createRow, createTable, defaultColumnSizing, expandRows, filterFns, flattenBy, functionalUpdate, getCoreRowModel, getExpandedRowModel, getFacetedMinMaxValues, getFacetedRowModel, getFacetedUniqueValues, getFilteredRowModel, getGroupedRowModel, getPaginationRowModel, getSortedRowModel, isFunction, isRowSelected, isSubRowSelected, makeStateUpdater, memo, noop, orderColumns, passiveEventSupported, reSplitAlphaNumeric, selectRowsFn, shouldAutoRemoveFilter, sortingFns };\n//# sourceMappingURL=index.mjs.map\n","import * as React from 'react'\nexport * from '@tanstack/table-core'\n\nimport {\n  TableOptions,\n  TableOptionsResolved,\n  RowData,\n  createTable,\n} from '@tanstack/table-core'\n\nexport type Renderable<TProps> = React.ReactNode | React.ComponentType<TProps>\n\n//\n\nexport function flexRender<TProps extends object>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode | JSX.Element {\n  return !Comp ? null : isReactComponent<TProps>(Comp) ? (\n    <Comp {...props} />\n  ) : (\n    Comp\n  )\n}\n\nfunction isReactComponent<TProps>(\n  component: unknown\n): component is React.ComponentType<TProps> {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nexport function useReactTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  // Compose in the generic options to the user options\n  const resolvedOptions: TableOptionsResolved<TData> = {\n    state: {}, // Dummy state\n    onStateChange: () => {}, // noop\n    renderFallbackValue: null,\n    ...options,\n  }\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable<TData>(resolvedOptions),\n  }))\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater)\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return tableRef.current\n}\n"],"names":["functionalUpdate","updater","input","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","result","deps","depTime","debug","Date","now","newDeps","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","resolvedColumnDef","_getDefaultColumnDef","accessorKey","accessorFn","id","replace","undefined","header","includes","originalRow","split","Error","column","columns","getFlatColumns","_column$columns","flatMap","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","Object","assign","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","headerGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","bottomHeaders","recurseHeadersForSpans","childRowSpans","childColSpan","childRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","updateOffset","eventType","clientXPos","newColumnSizing","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","noop","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","autoResetAll","autoResetExpanded","manualExpanding","_queue","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getIsExpanded","getExpandedDepth","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","_row$getValue2","equalsString","_row$getValue3","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_table$getCoreRowMode2","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","Array","isArray","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","_old$filter","shouldAutoRemoveFilter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","getAllLeafColumns","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","aggregationFns","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","Grouping","aggregatedCell","props","_toString","_props$getValue","toString","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","Pagination","pagination","pageIndex","pageSize","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","_table$initialState$p3","resetPageSize","_table$initialState$p4","_table$initialState2","_table$initialState2$","setPageSize","topRowIndex","floor","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPrePaginationRowModel","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","compareBasic","a","b","compareAlphanumeric","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","alphanumeric","rowA","rowB","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","sortAction","newSorting","nextDesc","_table$options$maxMul","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","cells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","_options$initialState","defaultOptions","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","mergeOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","defaultColumn","_defaultColumn","_props$renderValue$to","_props$renderValue","renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","_cell$getValue","renderFallbackValue","original","rowIndex","_valuesCache","_uniqueValuesCache","hasOwnProperty","getUniqueValues","getLeafRows","filterRows","filterRowImpl","rowsToFilter","filterRow","_table$options$maxLea","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","filterRowModelFromLeafs","_table$options$maxLea2","filterRowModelFromRoot","expandRows","expandedRows","handleRow","accessor","display","group","Comp","component","proto","getPrototypeOf","isReactComponent","isClassComponent","$$typeof","description","isExoticComponent","React","data","accessRows","originalRows","_row$originalSubRows","getSubRows","originalSubRows","facetedRowModel","_facetedRowModel$flat","firstValue","facetedMinMaxValues","j","preRowModel","filterableIds","facetedUniqueValues","_facetedUniqueValues$","has","set","get","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","_globalFilterFn$resol","filterMeta","__global__","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupMap","resKey","previous","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","pageStart","pageEnd","paginatedRowModel","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","aUndefined","bUndefined","sortInt","resolvedOptions","tableRef","useState","current","prev"],"mappings":"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"}