{"version":3,"file":"filterRowsUtils.js","sources":["../../../src/utils/filterRowsUtils.ts"],"sourcesContent":["import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n"],"names":["filterRows","rows","filterRowImpl","table","options","filterFromLeafRows","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","maxDepth","maxLeafRowFilterDepth","recurseFilterRows","depth","i","length","row","newRow","createRow","id","original","index","columnFilters","subRows","push","flatRows","rowsById","pass"],"mappings":"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"}