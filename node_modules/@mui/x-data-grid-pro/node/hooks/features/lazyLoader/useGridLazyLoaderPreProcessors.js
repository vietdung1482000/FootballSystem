"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGridLazyLoaderPreProcessors = exports.GRID_SKELETON_ROW_ROOT_ID = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _internals = require("@mui/x-data-grid/internals");

var _xDataGrid = require("@mui/x-data-grid");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const GRID_SKELETON_ROW_ROOT_ID = 'auto-generated-skeleton-row-root';
exports.GRID_SKELETON_ROW_ROOT_ID = GRID_SKELETON_ROW_ROOT_ID;

const getSkeletonRowId = index => `${GRID_SKELETON_ROW_ROOT_ID}-${index}`;

const useGridLazyLoaderPreProcessors = (apiRef, props) => {
  var _props$experimentalFe;

  const {
    lazyLoading
  } = (_props$experimentalFe = props.experimentalFeatures) != null ? _props$experimentalFe : {};
  const addSkeletonRows = React.useCallback(groupingParams => {
    if (!lazyLoading || props.rowsLoadingMode !== _xDataGrid.GridFeatureModeConstant.server || !props.rowCount || groupingParams.ids.length >= props.rowCount) {
      return groupingParams;
    }

    const newRowsIds = [...groupingParams.ids];

    for (let i = 0; i < props.rowCount - groupingParams.ids.length; i += 1) {
      const skeletonId = getSkeletonRowId(i);
      newRowsIds.push(skeletonId);
    }

    return (0, _extends2.default)({}, groupingParams, {
      ids: newRowsIds
    });
  }, [props.rowCount, props.rowsLoadingMode, lazyLoading]);
  (0, _internals.useGridRegisterPipeProcessor)(apiRef, 'hydrateRows', addSkeletonRows);
};

exports.useGridLazyLoaderPreProcessors = useGridLazyLoaderPreProcessors;