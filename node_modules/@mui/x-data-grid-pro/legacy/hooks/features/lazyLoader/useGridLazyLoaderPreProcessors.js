import _extends from "@babel/runtime/helpers/esm/extends";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import * as React from 'react';
import { useGridRegisterPipeProcessor } from '@mui/x-data-grid/internals';
import { GridFeatureModeConstant } from '@mui/x-data-grid';
export var GRID_SKELETON_ROW_ROOT_ID = 'auto-generated-skeleton-row-root';

var getSkeletonRowId = function getSkeletonRowId(index) {
  return "".concat(GRID_SKELETON_ROW_ROOT_ID, "-").concat(index);
};

export var useGridLazyLoaderPreProcessors = function useGridLazyLoaderPreProcessors(apiRef, props) {
  var _props$experimentalFe;

  var _ref = (_props$experimentalFe = props.experimentalFeatures) != null ? _props$experimentalFe : {},
      lazyLoading = _ref.lazyLoading;

  var addSkeletonRows = React.useCallback(function (groupingParams) {
    if (!lazyLoading || props.rowsLoadingMode !== GridFeatureModeConstant.server || !props.rowCount || groupingParams.ids.length >= props.rowCount) {
      return groupingParams;
    }

    var newRowsIds = _toConsumableArray(groupingParams.ids);

    for (var i = 0; i < props.rowCount - groupingParams.ids.length; i += 1) {
      var skeletonId = getSkeletonRowId(i);
      newRowsIds.push(skeletonId);
    }

    return _extends({}, groupingParams, {
      ids: newRowsIds
    });
  }, [props.rowCount, props.rowsLoadingMode, lazyLoading]);
  useGridRegisterPipeProcessor(apiRef, 'hydrateRows', addSkeletonRows);
};