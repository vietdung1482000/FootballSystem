import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import { useGridRegisterPipeProcessor } from '@mui/x-data-grid/internals';
export function addPinnedRow({
  groupingParams,
  rowModel,
  rowId,
  position,
  apiRef
}) {
  const idRowsLookup = _extends({}, groupingParams.idRowsLookup);

  const tree = _extends({}, groupingParams.tree); // TODO: warn if id is already present in `props.rows`


  idRowsLookup[rowId] = rowModel; // Do not push it to ids list so that pagination is not affected by pinned rows
  // ids.push(rowId);

  tree[rowId] = {
    id: rowId,
    isAutoGenerated: false,
    parent: null,
    depth: 0,
    groupingKey: null,
    groupingField: null,
    isPinned: true
  };
  apiRef.current.unstable_caches.rows.idRowsLookup[rowId] = _extends({}, rowModel);
  apiRef.current.unstable_caches.rows.idToIdLookup[rowId] = rowId;
  const previousPinnedRows = groupingParams.additionalRowGroups?.pinnedRows || {};
  const newPinnedRow = {
    id: rowId,
    model: rowModel
  };
  return _extends({}, groupingParams, {
    idRowsLookup,
    tree,
    additionalRowGroups: _extends({}, groupingParams.additionalRowGroups, {
      pinnedRows: _extends({}, previousPinnedRows, {
        [position]: [...(previousPinnedRows[position] || []), newPinnedRow]
      })
    })
  });
}
export const useGridRowPinningPreProcessors = apiRef => {
  const addPinnedRows = React.useCallback(groupingParams => {
    const pinnedRowsCache = apiRef.current.unstable_caches.pinnedRows || {};

    let newGroupingParams = _extends({}, groupingParams, {
      additionalRowGroups: _extends({}, groupingParams.additionalRowGroups, {
        // reset pinned rows state
        pinnedRows: {}
      })
    });

    pinnedRowsCache.topIds?.forEach(rowId => {
      newGroupingParams = addPinnedRow({
        groupingParams: newGroupingParams,
        rowModel: pinnedRowsCache.idLookup[rowId],
        rowId,
        position: 'top',
        apiRef
      });
    });
    pinnedRowsCache.bottomIds?.forEach(rowId => {
      newGroupingParams = addPinnedRow({
        groupingParams: newGroupingParams,
        rowModel: pinnedRowsCache.idLookup[rowId],
        rowId,
        position: 'bottom',
        apiRef
      });
    }); // If row with the same `id` is present both in `rows` and `pinnedRows` - remove it from `ids`

    newGroupingParams.ids = newGroupingParams.ids.filter(rowId => {
      if (newGroupingParams.tree[rowId] && newGroupingParams.tree[rowId].isPinned) {
        return false;
      }

      return true;
    });
    return newGroupingParams;
  }, [apiRef]);
  useGridRegisterPipeProcessor(apiRef, 'hydrateRows', addPinnedRows);
};