{"version":3,"file":"index.production.js","sources":["../../src/utils.ts","../../src/index.ts"],"sourcesContent":["export type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  },\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug?.()) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug?.()) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug?.()) {\n      const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n      const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n      const resultFpsPercentage = resultEndTime / 16\n\n      const pad = (str: number | string, num: number) => {\n        str = String(str)\n        while (str.length < num) {\n          str = ' ' + str\n        }\n        return str\n      }\n\n      console.info(\n        `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n        `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120),\n            )}deg 100% 31%);`,\n        opts?.key,\n      )\n    }\n\n    return result!\n  }\n}\n","import { memo } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\ntype ScrollBehavior = 'auto' | 'smooth'\n\nexport interface ScrollToOptions {\n  align?: ScrollAlignment\n  behavior?: ScrollBehavior\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string\n\nexport interface VirtualItem {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n}\n\ninterface Rect {\n  width: number\n  height: number\n}\n\n//\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nconst memoRectCallback = (\n  instance: Virtualizer<any, any>,\n  cb: (rect: Rect) => void,\n) => {\n  let prev: Rect = { height: -1, width: -1 }\n\n  return (rect: Rect) => {\n    if (\n      instance.options.horizontal\n        ? rect.width !== prev.width\n        : rect.height !== prev.height\n    ) {\n      cb(rect)\n    }\n\n    prev = rect\n  }\n}\n\nexport const observeElementRect = (\n  instance: Virtualizer<any, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const observer = new ResizeObserver((entries) => {\n    cb({\n      width: entries[0]?.contentRect.width as number,\n      height: entries[0]?.contentRect.height as number,\n    })\n  })\n\n  if (!instance.scrollElement) {\n    return\n  }\n\n  cb(instance.scrollElement.getBoundingClientRect())\n\n  observer.observe(instance.scrollElement)\n\n  return () => {\n    observer.unobserve(instance.scrollElement)\n  }\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<any, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const memoizedCallback = memoRectCallback(instance, cb)\n  const onResize = () =>\n    memoizedCallback({\n      width: instance.scrollElement.innerWidth,\n      height: instance.scrollElement.innerHeight,\n    })\n\n  if (!instance.scrollElement) {\n    return\n  }\n\n  onResize()\n\n  instance.scrollElement.addEventListener('resize', onResize, {\n    capture: false,\n    passive: true,\n  })\n\n  return () => {\n    instance.scrollElement.removeEventListener('resize', onResize)\n  }\n}\n\ntype ObserverMode = 'element' | 'window'\n\nconst scrollProps = {\n  element: ['scrollLeft', 'scrollTop'],\n  window: ['scrollX', 'scrollY'],\n} as const\n\nconst createOffsetObserver = (mode: ObserverMode) => {\n  return (instance: Virtualizer<any, any>, cb: (offset: number) => void) => {\n    if (!instance.scrollElement) {\n      return\n    }\n\n    const propX = scrollProps[mode][0]\n    const propY = scrollProps[mode][1]\n\n    let prevX: number = instance.scrollElement[propX]\n    let prevY: number = instance.scrollElement[propY]\n\n    const scroll = () => {\n      const offset =\n        instance.scrollElement[instance.options.horizontal ? propX : propY]\n\n      cb(Math.max(0, offset - instance.options.scrollMargin))\n    }\n\n    scroll()\n\n    const onScroll = (e: Event) => {\n      const target = e.currentTarget as HTMLElement & Window\n      const scrollX = target[propX]\n      const scrollY = target[propY]\n\n      if (instance.options.horizontal ? prevX - scrollX : prevY - scrollY) {\n        scroll()\n      }\n\n      prevX = scrollX\n      prevY = scrollY\n    }\n\n    instance.scrollElement.addEventListener('scroll', onScroll, {\n      capture: false,\n      passive: true,\n    })\n\n    return () => {\n      instance.scrollElement.removeEventListener('scroll', onScroll)\n    }\n  }\n}\n\nexport const observeElementOffset = createOffsetObserver('element')\nexport const observeWindowOffset = createOffsetObserver('window')\n\nexport const measureElement = <TItemElement extends Element>(\n  element: TItemElement,\n  instance: Virtualizer<any, TItemElement>,\n) => {\n  return Math.round(\n    element.getBoundingClientRect()[\n      instance.options.horizontal ? 'width' : 'height'\n    ],\n  )\n}\n\nexport const windowScroll = <T extends Window>(\n  offset: number,\n  {\n    adjustments,\n    behavior,\n    sync,\n  }: { adjustments?: number; behavior?: ScrollBehavior; sync: boolean },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset =\n    (sync ? offset : offset + instance.options.scrollMargin) +\n    (adjustments ?? 0)\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport const elementScroll = <T extends Element>(\n  offset: number,\n  {\n    adjustments,\n    behavior,\n    sync,\n  }: { adjustments?: number; behavior?: ScrollBehavior; sync: boolean },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset =\n    (sync ? offset : offset + instance.options.scrollMargin) +\n    (adjustments ?? 0)\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement | null\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    options: { adjustments?: number; behavior?: ScrollBehavior; sync: boolean },\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (offset: number) => void,\n  ) => void | (() => void)\n\n  // Optional\n  debug?: any\n  initialRect?: Rect\n  onChange?: (instance: Virtualizer<TScrollElement, TItemElement>) => void\n  measureElement?: (\n    el: TItemElement,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => number[]\n  scrollMargin?: number\n  scrollingDelay?: number\n  indexAttribute?: string\n}\n\nexport class Virtualizer<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  private unsubs: (void | (() => void))[] = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  isScrolling: boolean = false\n  private isScrollingTimeoutId: ReturnType<typeof setTimeout> | null = null\n  measurementsCache: VirtualItem[] = []\n  private itemMeasurementsCache: Record<Key, number> = {}\n  private pendingMeasuredCacheIndexes: number[] = []\n  private scrollRect: Rect\n  private scrollOffset: number\n  private scrollAdjustments: number = 0\n  private measureElementCache: Record<Key, TItemElement> = {}\n  private pendingScrollToIndexCallback: (() => void) | null = null\n  private getResizeObserver = (() => {\n    let _ro: ResizeObserver | null = null\n\n    return () => {\n      if (_ro) {\n        return _ro\n      } else if (typeof ResizeObserver !== 'undefined') {\n        return (_ro = new ResizeObserver((entries) => {\n          entries.forEach((entry) => {\n            this._measureElement(entry.target as TItemElement, false)\n          })\n        }))\n      } else {\n        return null\n      }\n    }\n  })()\n  range: { startIndex: number; endIndex: number } = {\n    startIndex: 0,\n    endIndex: 0,\n  }\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n    this.scrollRect = this.options.initialRect\n    this.scrollOffset = this.options.initialOffset\n\n    this.calculateRange()\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      scrollMargin: 0,\n      scrollingDelay: 150,\n      indexAttribute: 'data-index',\n      ...opts,\n    }\n  }\n\n  private notify = () => {\n    this.options.onChange?.(this)\n  }\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.scrollElement = null\n  }\n\n  _didMount = () => {\n    const ro = this.getResizeObserver()\n    Object.values(this.measureElementCache).forEach((node) => ro?.observe(node))\n\n    return () => {\n      ro?.disconnect()\n\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    this.pendingScrollToIndexCallback?.()\n\n    const scrollElement = this.options.getScrollElement()\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      this.scrollElement = scrollElement\n\n      this._scrollToOffset(this.scrollOffset, {\n        adjustments: undefined,\n        behavior: undefined,\n        sync: true,\n      })\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          this.scrollRect = rect\n          this.calculateRange()\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset) => {\n          if (this.isScrollingTimeoutId !== null) {\n            clearTimeout(this.isScrollingTimeoutId)\n            this.isScrollingTimeoutId = null\n          }\n\n          const onIsScrollingChange = (isScrolling: boolean) => {\n            if (this.isScrolling !== isScrolling) {\n              this.isScrolling = isScrolling\n              this.notify()\n            }\n          }\n\n          this.scrollAdjustments = 0\n\n          if (this.scrollOffset !== offset) {\n            this.scrollOffset = offset\n            onIsScrollingChange(true)\n          }\n\n          this.calculateRange()\n\n          this.isScrollingTimeoutId = setTimeout(() => {\n            this.isScrollingTimeoutId = null\n            onIsScrollingChange(false)\n          }, this.options.scrollingDelay)\n        }),\n      )\n    } else if (!this.isScrolling) {\n      this.calculateRange()\n    }\n  }\n\n  private getSize = () => {\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private getMeasurements = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.getItemKey,\n      this.itemMeasurementsCache,\n    ],\n    (count, paddingStart, getItemKey, measurementsCache) => {\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i)\n        const measuredSize = measurementsCache[key]\n        const start = measurements[i - 1]\n          ? measurements[i - 1]!.end\n          : paddingStart\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n        const end = start + size\n        measurements[i] = { index: i, start, size, end, key }\n      }\n\n      this.measurementsCache = measurements\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  calculateRange = memo(\n    () => [this.getMeasurements(), this.getSize(), this.scrollOffset],\n    (measurements, outerSize, scrollOffset) => {\n      const range = calculateRange({\n        measurements,\n        outerSize,\n        scrollOffset,\n      })\n      if (\n        range.startIndex !== this.range.startIndex ||\n        range.endIndex !== this.range.endIndex\n      ) {\n        this.range = range\n        this.notify()\n      }\n      return this.range\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private getIndexes = memo(\n    () => [\n      this.options.rangeExtractor,\n      this.range,\n      this.options.overscan,\n      this.options.count,\n    ],\n    (rangeExtractor, range, overscan, count) => {\n      return rangeExtractor({\n        ...range,\n        overscan,\n        count: count,\n      })\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  indexFromElement = (node: TItemElement) => {\n    const attributeName = this.options.indexAttribute\n    const indexStr = node.getAttribute(attributeName)\n\n    if (!indexStr) {\n      console.warn(\n        `Missing attribute name '${attributeName}={index}' on measured element.`,\n      )\n      return -1\n    }\n\n    return parseInt(indexStr, 10)\n  }\n\n  private _measureElement = (node: TItemElement, _sync: boolean) => {\n    const index = this.indexFromElement(node)\n\n    const item = this.measurementsCache[index]\n    if (!item) {\n      return\n    }\n\n    const prevNode = this.measureElementCache[item.key]\n\n    const ro = this.getResizeObserver()\n\n    if (!node.isConnected) {\n      if (prevNode) {\n        ro?.unobserve(prevNode)\n        delete this.measureElementCache[item.key]\n      }\n      return\n    }\n\n    if (!prevNode || prevNode !== node) {\n      if (prevNode) {\n        ro?.unobserve(prevNode)\n      }\n      this.measureElementCache[item.key] = node\n      ro?.observe(node)\n    }\n\n    const measuredItemSize = this.options.measureElement(node, this)\n\n    const itemSize = this.itemMeasurementsCache[item.key] ?? item.size\n\n    const delta = measuredItemSize - itemSize\n\n    if (delta !== 0) {\n      if (item.start < this.scrollOffset && this.isScrolling) {\n        if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n          console.info('correction', delta)\n        }\n\n        this._scrollToOffset(this.scrollOffset, {\n          adjustments: (this.scrollAdjustments += delta),\n          behavior: undefined,\n          sync: false,\n        })\n      }\n\n      this.pendingMeasuredCacheIndexes.push(index)\n      this.itemMeasurementsCache = {\n        ...this.itemMeasurementsCache,\n        [item.key]: measuredItemSize,\n      }\n      this.notify()\n    }\n  }\n\n  measureElement = (node: TItemElement | null) => {\n    if (!node) {\n      return\n    }\n\n    this._measureElement(node, true)\n  }\n\n  getVirtualItems = memo(\n    () => [this.getIndexes(), this.getMeasurements()],\n    (indexes, measurements) => {\n      const virtualItems: VirtualItem[] = []\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        virtualItems.push(measurement)\n      }\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  scrollToOffset = (\n    toOffset: number,\n    { align = 'start', behavior }: ScrollToOffsetOptions = {},\n  ) => {\n    const offset = this.scrollOffset\n    const size = this.getSize()\n\n    if (align === 'auto') {\n      if (toOffset <= offset) {\n        align = 'start'\n      } else if (toOffset >= offset + size) {\n        align = 'end'\n      } else {\n        align = 'start'\n      }\n    }\n\n    const options = {\n      adjustments: undefined,\n      behavior,\n      sync: false,\n    }\n    if (align === 'start') {\n      this._scrollToOffset(toOffset, options)\n    } else if (align === 'end') {\n      this._scrollToOffset(toOffset - size, options)\n    } else if (align === 'center') {\n      this._scrollToOffset(toOffset - size / 2, options)\n    }\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align = 'auto', ...rest }: ScrollToIndexOptions = {},\n  ) => {\n    this.pendingScrollToIndexCallback = null\n\n    const measurements = this.getMeasurements()\n    const offset = this.scrollOffset\n    const size = this.getSize()\n    const { count } = this.options\n\n    const measurement = measurements[Math.max(0, Math.min(index, count - 1))]\n\n    if (!measurement) {\n      return\n    }\n\n    if (align === 'auto') {\n      if (measurement.end >= offset + size - this.options.scrollPaddingEnd) {\n        align = 'end'\n      } else if (\n        measurement.start <=\n        offset + this.options.scrollPaddingStart\n      ) {\n        align = 'start'\n      } else {\n        return\n      }\n    }\n\n    const toOffset =\n      align === 'end'\n        ? measurement.end + this.options.scrollPaddingEnd\n        : measurement.start - this.options.scrollPaddingStart\n\n    this.scrollToOffset(toOffset, { align, ...rest })\n\n    const isDynamic = Object.keys(this.measureElementCache).length > 0\n\n    if (isDynamic) {\n      const didSeen = () =>\n        typeof this.itemMeasurementsCache[this.options.getItemKey(index)] ===\n        'number'\n\n      if (!didSeen()) {\n        this.pendingScrollToIndexCallback = () => {\n          if (didSeen()) {\n            this.pendingScrollToIndexCallback = null\n            this.scrollToIndex(index, { align, ...rest })\n          }\n        }\n      }\n    }\n  }\n\n  getTotalSize = () =>\n    (this.getMeasurements()[this.options.count - 1]?.end ||\n      this.options.paddingStart) + this.options.paddingEnd\n\n  private _scrollToOffset = (\n    offset: number,\n    {\n      adjustments,\n      behavior,\n      sync,\n    }: {\n      adjustments: number | undefined\n      behavior: ScrollBehavior | undefined\n      sync: boolean\n    },\n  ) => {\n    this.options.scrollToFn(offset, { behavior, sync, adjustments }, this)\n  }\n\n  measure = () => {\n    this.itemMeasurementsCache = {}\n    this.notify()\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset,\n}: {\n  measurements: VirtualItem[]\n  outerSize: number\n  scrollOffset: number\n}) {\n  const count = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset)\n  let endIndex = startIndex\n\n  while (\n    endIndex < count &&\n    measurements[endIndex]!.end < scrollOffset + outerSize\n  ) {\n    endIndex++\n  }\n\n  return { startIndex, endIndex }\n}\n"],"names":["memo","getDeps","fn","opts","result","deps","depTime","key","debug","Date","now","newDeps","length","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","defaultKeyExtractor","defaultRangeExtractor","range","start","startIndex","overscan","end","endIndex","count","arr","i","push","scrollProps","element","window","createOffsetObserver","mode","instance","cb","scrollElement","propX","propY","prevX","prevY","scroll","offset","options","horizontal","scrollMargin","onScroll","e","target","currentTarget","scrollX","scrollY","addEventListener","capture","passive","removeEventListener","observeElementOffset","observeWindowOffset","measureElement","getBoundingClientRect","constructor","_this","this","unsubs","isScrolling","isScrollingTimeoutId","measurementsCache","itemMeasurementsCache","pendingMeasuredCacheIndexes","scrollAdjustments","measureElementCache","pendingScrollToIndexCallback","getResizeObserver","_ro","ResizeObserver","entries","forEach","entry","_measureElement","setOptions","Object","_ref3","value","initialOffset","paddingStart","paddingEnd","scrollPaddingStart","scrollPaddingEnd","getItemKey","rangeExtractor","initialRect","width","height","scrollingDelay","indexAttribute","notify","_this$options$onChang","_this$options","call","cleanup","filter","Boolean","d","_didMount","ro","values","node","observe","disconnect","_willUpdate","_this$pendingScrollTo","getScrollElement","_scrollToOffset","scrollOffset","adjustments","undefined","behavior","sync","observeElementRect","rect","scrollRect","calculateRange","clearTimeout","onIsScrollingChange","setTimeout","getSize","getMeasurements","measurements","slice","measuredSize","size","estimateSize","process","outerSize","_ref5","low","high","getCurrentValue","middle","currentValue","findNearestBinarySearch","getIndexes","indexFromElement","attributeName","indexStr","getAttribute","parseInt","warn","_sync","item","prevNode","isConnected","unobserve","measuredItemSize","delta","getVirtualItems","indexes","virtualItems","k","len","measurement","scrollToOffset","toOffset","_temp","align","scrollToIndex","_temp2","rest","keys","didSeen","getTotalSize","_this$getMeasurements","_ref4","scrollToFn","measure","_ref2","_instance$scrollEleme2","scrollTo","observer","_entries$","_entries$2","contentRect","memoizedCallback","prev","memoRectCallback","onResize","innerWidth","innerHeight","_ref","_instance$scrollEleme"],"mappings":"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"}